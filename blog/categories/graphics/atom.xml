<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Graphics | ./home/davidsiaw]]></title>
  <link href="http://davidsiaw.github.io/blog/categories/graphics/atom.xml" rel="self"/>
  <link href="http://davidsiaw.github.io/"/>
  <updated>2013-10-12T18:31:58+13:00</updated>
  <id>http://davidsiaw.github.io/</id>
  <author>
    <name><![CDATA[davidsiaw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making Color From Alpha, Hue, Saturation and Brightness]]></title>
    <link href="http://davidsiaw.github.io/blog/2011/11/22/making-color-from-alpha-hue-saturation-and-brightness/"/>
    <updated>2011-11-22T00:00:00+13:00</updated>
    <id>http://davidsiaw.github.io/blog/2011/11/22/making-color-from-alpha-hue-saturation-and-brightness</id>
    <content type="html"><![CDATA[<p>I find myself wanting to do this sometimes, so here&rsquo;s a bit of code (I&rsquo;m sure I stole this code from somewhere else);</p>

<p>``` csharp
public static Color ColorFromAhsb(int a, float h, float s, float b) {</p>

<pre><code>if (0 &gt; a || 255 &lt; a) {
    throw new ArgumentOutOfRangeException(&amp;quot;a&amp;quot;);
}
if (0f &gt; h || 360f &lt; h) {
    throw new ArgumentOutOfRangeException(&amp;quot;h&amp;quot;);
}
if (0f &gt; s || 1f &lt; s) {
    throw new ArgumentOutOfRangeException(&amp;quot;s&amp;quot;);
}
if (0f &gt; b || 1f &lt; b) {
    throw new ArgumentOutOfRangeException(&amp;quot;b&amp;quot;);
}

if (0 == s) {
    return Color.FromArgb(a, Convert.ToInt32(b * 255),
        Convert.ToInt32(b * 255), Convert.ToInt32(b * 255));
}

float fMax, fMid, fMin;
int iSextant, iMax, iMid, iMin;

if (0.5 &lt; b) {
    fMax = b - (b * s) + s;
    fMin = b + (b * s) - s;
} else {
    fMax = b + (b * s);
    fMin = b - (b * s);
}

iSextant = (int)Math.Floor(h / 60f);
if (300f &lt;= h) {
    h -= 360f;
}
h /= 60f;
h -= 2f * (float)Math.Floor(((iSextant + 1f) % 6f) / 2f);
if (0 == iSextant % 2) {
    fMid = h * (fMax - fMin) + fMin;
} else {
    fMid = fMin - h * (fMax - fMin);
}

iMax = Convert.ToInt32(fMax * 255);
iMid = Convert.ToInt32(fMid * 255);
iMin = Convert.ToInt32(fMin * 255);

switch (iSextant) {
    case 1:
        return Color.FromArgb(a, iMid, iMax, iMin);
    case 2:
        return Color.FromArgb(a, iMin, iMax, iMid);
    case 3:
        return Color.FromArgb(a, iMin, iMid, iMax);
    case 4:
        return Color.FromArgb(a, iMid, iMin, iMax);
    case 5:
        return Color.FromArgb(a, iMax, iMin, iMid);
    default:
        return Color.FromArgb(a, iMax, iMid, iMin);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RBSP Tree for Lightmap packing]]></title>
    <link href="http://davidsiaw.github.io/blog/2008/10/19/rbsp-tree-for-lightmap-packing/"/>
    <updated>2008-10-19T00:00:00+13:00</updated>
    <id>http://davidsiaw.github.io/blog/2008/10/19/rbsp-tree-for-lightmap-packing</id>
    <content type="html"><![CDATA[<p>For fun, and for the purpose of making a batch texture that can store characters for fonts, I have created a little tree based off <a href="http://www.blackpawn.com/texts/lightmaps/default.html">this tutorial by BlackPawn</a>. Basically, the idea here is to partition the original rectangle in such a way to get the maximum area out of the texture to hold the subtextures.</p>

<p>The pseudocode provided in BlackPawn&rsquo;s site is based off a simple concept. Basically, you partition an empty rectangle to store an image, and the other resulting empty rectangles are candidates for future partitioning. I call this structure a Rectangular Binary Space Partitioning Tree.</p>

<!--more-->


<p>An RBSP tree works similar to a BSP, except it only splits two ways, horizontally or vertically. Hence the name. Here is how an RBSP tree is used to describe a rectangle for the purposes of lightmap packing.</p>

<p><img src="/images/blogimages/lightmap/boxsplit.png"></p>

<p>In the image above, when an image wants to be put on a supertexture, the supertexture has to be split twice to create a box that is exactly the right size for the image. Notice that there is a major split and a minor split.</p>

<p><img src="/images/blogimages/lightmap/treeview.png"></p>

<p>In order to remember how the rectangle is split, a tree is needed to describe the topography of the partitioning. Here, in the tree, each node describes a rectangle. Rectangles that have images become leaves and empty rectangles make up the branches.</p>

<p>Here we see when we want to insert an image, A gets partitioned into B and C, and B, which has the same height as the incoming image, gets partitioned again to D and E, with D having the same width as the incoming image.</p>

<p>In the next step, D has the perfect size for the incoming image, and takes the image and becomes a leaf. In the future, if there were more images to be inserted to the supertexture, either C or E could be partitioned to take the image, depending on which one can fit the image, and which is smaller.</p>

<p>You might realize now that the efficiency of this method is seen in the amount of wasted space in a supertexture, that are usually pockets of rectangles that are too small to fit any image in. If there are lots of pockets, there is a smaller chance that an image would fit into the supertexture, hence, the supertexture can hold less images that what it should be able to otherwise.</p>

<p>The biggest factor that influences the efficiency of this method is how you decide to partition a rectangle every time a new image comes in. As you have seen in the example above, a rectangle is seldom the same size as an image, so often, the rectangle has to be partitioned two ways. There is a major and minor split, and one has to decide which split is horizontal, and which split is vertical.</p>

<p>The heuristic provided by BlackPawn&rsquo;s pseudocode is the best splitting heuristic I know of yet, though there could be an even more efficient way of deciding which way to cut the rectangle for minimal wasted space.</p>

<p>Another way to increase the efficiency of the packing is to sort the images by size. Big ones go in first, followed by smaller ones. This makes sense, because smaller ones are more likely to create small rectangles as a result of their major partitioning, which cannot fit larger images, and wastes space.</p>

<p>Here&rsquo;s a video of the lightmap packing structure in action:</p>

<object width="425" height="350"> <param name="movie" value="http://www.youtube.com/v/No0Ykk2mMNo"> </param> <embed src="http://www.youtube.com/v/No0Ykk2mMNo" type="application/x-shockwave-flash" width="425" height="350"> </embed> </object>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2D in OpenGL]]></title>
    <link href="http://davidsiaw.github.io/blog/2008/10/11/2d-in-opengl/"/>
    <updated>2008-10-11T00:00:00+13:00</updated>
    <id>http://davidsiaw.github.io/blog/2008/10/11/2d-in-opengl</id>
    <content type="html"><![CDATA[<p>After some experimentation, I have finally come to a point where I have written some code that does scaling, rotation and alpha on images that I want to display on the screen. Although the concept of drawing 2D in OpenGL is fairly easy to grasp, in that everything is the same except you don&rsquo;t deal with the z-dimension, most of the time when you deal with 2D, you want to deal in actual pixel coordinates on the screen, and you want to do some things differently. Despite the numerous tutorial in OpenGL you can find online, few actually provide much information about using OpenGL for 2D graphics.</p>

<p><strong>Why OpenGL for 2D graphics?</strong></p>

<p>Not too long ago I was working on a project to greatly simplify drawing an image on to screen and rotating and scaling it just as you could do in photoshop, but programatically, after a few months of working on it I started realizing how slow and heavy the process of actually doing that kind of transformation was. On a framebuffer, performing transforms like those and blitting it to the screen was something that was painfully slow, used 75% of the CPU time usually, and not suitable for any application that would be rich in graphic content.</p>

<p>This led me to attempting to try OpenGL. The main selling point OpenGL had was it enabled direct access to any graphics accelerator hardware available on the computer. Graphics cards have been purpose built to perform sampling on images, and were designed to reduce the amount of data transferred from the main memory for the purposes of drawing stuff on the screen. This enabled acceleration to the point where hundreds of images could be transformed on the fly without any drop in frame rate, and without burdening the CPU with having to process images at every frame.</p>

<p>OpenGL is now found almost everywhere a graphics card is installed, and most, if not all PCs and Macs now come with graphics card that supports OpenGL in one way or another. This means that an application written using OpenGL, will effectively, theoretically be usable on any computer at all. Also, its OS-neutral nature meant that any programs I write with it will be usable on any modern OS that supports a half-decent graphics subsystem.</p>

<p>Portability, ubiquity and performance. These were the key reasons I thought that it was time to give OpenGL a go, so I did.</p>

<p><strong>So how do you do it?</strong></p>

<p>OpenGL in 2D is nothing more than just OpenGL without using the Z-axis. There are tons of OpenGL tutorials out there <em>cough</em>NeHe<em>cough</em> that will teach you how to create a window and a rendering context for OpenGL. I recommend SDL for that purpose, because it has a set of libraries that work with it that simply does so much that you don&rsquo;t have to find a library that does basic stuff like playing sounds and concentrate more on making your game. The only things you really need in addition to the standard 3D setup are to to map each pixel on the screen to OpenGL coordinates with gluOrtho2D and enabling alpha testing.</p>

<p>Some sample code stolen from somewhere below:</p>

<p>``` c++
void glEnable2D()
{</p>

<pre><code>glEnable (GL_ALPHA_TEST); 

int vPort[4];

glGetIntegerv(GL_VIEWPORT, vPort);

glMatrixMode(GL_PROJECTION);
glPushMatrix();
glLoadIdentity();

gluOrtho2D(0.0, vPort[2], vPort[3], 0.0);

glMatrixMode(GL_MODELVIEW);
glPushMatrix();
glLoadIdentity();
</code></pre>

<p>}
```</p>

<p>So setting up OpenGL for 2D drawing is extremely simple. To draw something on the screen, simply go:</p>

<p>``` c++
void drawFilledRectangle()
{</p>

<pre><code>glColor4f(255.0 , 0.0, 0.0, 255.0);

glBindTexture( GL_TEXTURE_2D, 0 );

glBegin( GL_QUADS );
glVertex3i( 0, 0, 0 );
glVertex3i( 100, 0, 0 );
glVertex3i( 100, 100, 0 );
glVertex3i( 0, 100, 0 );
glEnd();
</code></pre>

<p>}
```</p>

<p>There we go, we have successfully drawn a rectangle on the screen. This may just become the start of a series of tutorials that I will write up as I learn more about using OpenGL for 2D drawings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertex Buffer Objects]]></title>
    <link href="http://davidsiaw.github.io/blog/2008/09/16/vertex-buffer-objects/"/>
    <updated>2008-09-16T00:00:00+12:00</updated>
    <id>http://davidsiaw.github.io/blog/2008/09/16/vertex-buffer-objects</id>
    <content type="html"><![CDATA[<p>In my last post I mentioned that if you wanted to draw a large number of things on a screen, you need VBOs. Well, honestly at the time, I only knew what it was but never touched it before. VBOs are Vertex Buffer Objects, in other words, boxes in the GPU to store vertices, their colors, normals and attributes. After a considerable amount of Googling, I was finally able to learn what VBOs are and relate them to the intermediate mode. This would probably help those who have started openGL by learning glBegin and glEnd learn about what VBOs truly are, and why they exist.</p>

<!--more-->


<p>The first difference is, in intermediate mode, one would send vertices one by one to the GPU inside glBegin and glEnd blocks, so openGL can draw them to a screen. Using a VBO, however, you get to send a whole pile of vertices to the GPU at once, and save them there, and when you refresh the screen, all you need to do is tell the GPU where the vertices are and they will get drawn to the screen. Alright, lets look at some code to illustrate this: (this is the refresh function by the way, which gets called every frame, stolen from the previous post)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Intermediate mode </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">refresh</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glColor4f</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glVertex3i</span><span class="p">(</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glColor3f</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glVertex3i</span><span class="p">(</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glColor3f</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glVertex3i</span><span class="p">(</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glColor3f</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glVertex3i</span><span class="p">(</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">glEnd</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Vertex Buffer Object </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">refresh</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span> <span class="n">vbo</span><span class="p">);</span>     <span class="c1">// Use the buffer called &#39;vbo&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glVertexPointer</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>     <span class="c1">// The vertex information start at 0, and have 3 numbers</span>
</span><span class='line'>    <span class="n">glColorPointer</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">vertices</span><span class="p">)</span> <span class="p">));</span>    <span class="c1">// The vertex information start at offset (sizeof(vertices)) and have 3 numbers</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>     <span class="c1">// Draw quads. You should find 4 complete vertices and colors in the places I just mentioned</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Whoa whoa now, how does openGL know what to draw in the second refresh function, and where did the variables &lsquo;vbo&rsquo; and &lsquo;vertices&rsquo; come from? You may ask. Well, the secret lies in the initialization, or what happens before we start flipping buffers. Which brings us to the second difference between Intermediate Mode and VBOs: You need to give the vertex buffer objects to the GPU first, then, you just tell the GPU &ldquo;hey, I wanna draw the stuff I told you about&rdquo;. Here is the initialization code for the VBO refresh function you just saw:</p>

<p>``` c++
GLuint vbo;</p>

<p>GLfloat vertices[] = {</p>

<pre><code>250.0, 250.0, 0.0, 
300.0, 250.0, 0.0, 
300.0, 300.0, 0.0,
250.0, 300.0, 0.0};
</code></pre>

<p>GLfloat colors[] = {</p>

<pre><code>1.0,0.0,0.0, 
0.0,1.0,0.0, 
0.0,0.0,1.0, 
1.0,1.0,1.0};
</code></pre>

<p>void initvbo()
{</p>

<pre><code>glGenBuffers(1, &amp;vbo);      // Can I has 1 buffer
glBindBuffer(GL_ARRAY_BUFFER, vbo);     // The buffer is for an array of floats

glBufferData(GL_ARRAY_BUFFER, sizeof(vertices)+sizeof(colors), 0, GL_STATIC_DRAW);   // The buffer is empty
glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(vertices), vertices);    // Starting from zero to (sizeof(vertices)), copy the contents of vertices to the buffer
glBufferSubData(GL_ARRAY_BUFFER, sizeof(vertices), sizeof(colors), colors);    // Starting from (sizeof(vertices)) to (sizeof(colors)) later, copy the contents of the array colors to the buffer.

    glEnableClientState(GL_COLOR_ARRAY);    // Make it so that you can use color arrays
    glEnableClientState(GL_VERTEX_ARRAY);  // Make it so that you can use vertex arrays
</code></pre>

<p>}
```</p>

<p>Basically, the before you tell the GPU what to draw, you need to tell it how to draw it first. In Intermediate mode, you tell the GPU how to draw shapes in every frame, so there is no initialization code, but using a VBO, you tell the GPU how to draw shapes once, and tell it to draw it every frame. This doesn&rsquo;t seem like a very useful thing until your program starts slowing down when you have too many things on the screen in Intermediate mode. VBOs solve that problem by avoiding having to send vertices to the GPU all the time like in intermediate mode, which takes a while.</p>

<p>Why? Imagine a group of school children that go to school every day. Every day (Intermediate mode) they will need to ride a bus to school and back home, which wastes petrol, makes noise, and ruins the environment (especially by paper planes thrown out by the kids). However, it would be great if you could just (VBO) send them to a boarding school once, and let them get all the discipline in the world that they need without having to worry about them being late for the bus. Advantages: less wasted time, more real work done.</p>

<p>So if you are using Intermediate mode to draw the City of Paris, remember that you can use VBOs to speed up the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with GLSL]]></title>
    <link href="http://davidsiaw.github.io/blog/2008/08/31/playing-with-glsl/"/>
    <updated>2008-08-31T00:00:00+12:00</updated>
    <id>http://davidsiaw.github.io/blog/2008/08/31/playing-with-glsl</id>
    <content type="html"><![CDATA[<p>After puzzling some time over the tutorials in <a href="http://www.lighthouse3d.com/opengl/glsl/">Lighthouse3D</a>, I finally learned how to prepare a GLSL shader and use it in an OpenGL render. In the beginning I thought a shader could be used on a particular set of vertices and fragments. However, it turned out that the shader was run every frame on every vertex and fragment you gave OpenGL to use. This meant that if you made a simple fragment shader that coloured the current fragment red, then everything you draw on the screen will be red. It turns out the shader replaces the so-called fixed-functionality in the rendering pipeline, which is basically a little assembly line where all the vertices and colours given to the video card gets processed. So instead of having the workers work their normal routine, a shader tells them what to do instead. To be honest I felt a little disappointed since I could not write something like actionscript would allow me to do, but I guess that is just because it isn&rsquo;t meant to be actionscript.</p>

<!--more-->


<p>For those of you who are wondering how you go about using GLSL, here&rsquo;s a simple example that I used in my code:</p>

<p>``` c++
const char* fshadersource =</p>

<pre><code>"void main()"
"{"
"   mat4 tform = mat4("
"   1/200.0,0,0,0, "
"   0,1/200.0,0,0, "
"   0,0,1/200.0,0, "
"   1.0,1.0,1.0,1.0);"
"   vec4 comp = vec4(0, 0, 0, 1.0);"
"   gl_FragColor = gl_FragCoord * tform + comp;"
"}"
</code></pre>

<p>;</p>

<p>const char* vshadersource =</p>

<pre><code>"void main()"
"{"
"   gl_Position = ftransform();"
"}"
</code></pre>

<p>;</p>

<p>void useProgram()
{</p>

<pre><code>glewInit();
GLuint fshader = glCreateShader(GL_FRAGMENT_SHADER);
glShaderSource(fshader, 1, &amp;fshadersource, NULL);
GLuint vshader = glCreateShader(GL_VERTEX_SHADER);
glShaderSource(vshader, 1, &amp;vshadersource, NULL);
glCompileShader(fshader);
printShaderInfoLog(fshader);

glCompileShader(vshader);
printShaderInfoLog(vshader);

GLuint prog = glCreateProgram();
glAttachShader(prog, fshader);
printProgramInfoLog(prog);

glAttachShader(prog, vshader);
printProgramInfoLog(prog);

glLinkProgram(prog);
printProgramInfoLog(prog);

glUseProgram(prog);
</code></pre>

<p>}</p>

<p>void draw()
{</p>

<pre><code>glLoadIdentity();

glBindTexture( GL_TEXTURE_2D, 0 );
glBegin(GL_QUADS);

    glColor4f(1.0,0.0,0.0,1.0);
    glVertex3i( 50, 50, 0 );

    glColor4f(0.0,1.0,0.0,0.2);
    glVertex3i( 100, 50, 0 );

    glColor4f(0.0,0.0,1.0,1.0);
    glVertex3i( 100, 100, 0 );

    glColor4f(1.0,1.0,1.0,1.0);
    glVertex3i( 50,100, 0 );

glEnd();

glBegin(GL_QUADS);

    glColor3f(1.0,0.0,0.0);
    glVertex3i( 250, 250, 0 );

    glColor3f(0.0,1.0,0.0);
    glVertex3i( 300, 250, 0 );

    glColor3f(0.0,0.0,1.0);
    glVertex3i( 300, 300, 0 );

    glColor3f(1.0,1.0,1.0);
    glVertex3i( 250, 300, 0 );

glEnd();
</code></pre>

<p>}</p>

<p>void init ()
{</p>

<pre><code>glShadeModel(GL_SMOOTH);        
glClearColor(0.0f, 0.0f, 0.0f, 0.5f);               
glClear( GL_COLOR_BUFFER_BIT );
glDisable(GL_DEPTH_TEST);
glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);  
glEnable (GL_TEXTURE_2D);                           
glEnable (GL_ALPHA_TEST); 
glEnable (GL_BLEND); 
glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
glViewport( 0, 0, 800, 600 );

int vPort[4];

glGetIntegerv(GL_VIEWPORT, vPort);

glMatrixMode(GL_PROJECTION);
glPushMatrix();
glLoadIdentity();

glOrtho(0, vPort[2], 0, vPort[3], -1, 1);
glMatrixMode(GL_MODELVIEW);
glPushMatrix();
glLoadIdentity();
</code></pre>

<p>}</p>

<p>```</p>

<p><img src="/images/blogimages/glsl.png"></p>

<p>In the code, I show the init() and draw() routines to show the code that I used to test this. The useProgram() routine is the actual meat that was useful in preparing the GLSL code and using it. Here, the vertex shader still uses the fixed-functionality, but the fragment shader uses a simple transformation matrix to convert the coordinates of a certain fragment to its color. In this case, it makes any point near the top left of the screen green and any point near the bottom left of the screen red. Any other point on the screen would be yellowish.</p>

<p>You will find that the shader program only replaces the fixed functionality of the video card&rsquo;s pipeline, which means that it can&rsquo;t really generate new vertices or draw new stuff on the screen. You still need to tell OpenGL what to render with glBegin(GL_QUADS), which means it really doesn&rsquo;t help you if you want to render a lot of stuff. If you want to upload a set of vertices to the video card once and for all, you&rsquo;d probably want to use stuff like VBOs.</p>
]]></content>
  </entry>
  
</feed>
