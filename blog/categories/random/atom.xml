<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Random | ./home/davidsiaw]]></title>
  <link href="http://davidsiaw.github.io/blog/categories/random/atom.xml" rel="self"/>
  <link href="http://davidsiaw.github.io/"/>
  <updated>2014-11-21T02:42:07+00:00</updated>
  <id>http://davidsiaw.github.io/</id>
  <author>
    <name><![CDATA[davidsiaw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hexlife]]></title>
    <link href="http://davidsiaw.github.io/blog/2014/11/21/hexlife/"/>
    <updated>2014-11-21T10:46:00+00:00</updated>
    <id>http://davidsiaw.github.io/blog/2014/11/21/hexlife</id>
    <content type="html"><![CDATA[<p>Last week I wrote a simple Game of Life variation that runs on a hexagonal grid after viewing <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life#mediaviewer/File:Oscillator.gif">an example on Wikipedia</a>. The cells considered are the immediate neighbours. The rules are:</p>

<ul>
<li>if a dead cell is surrounded by 2 live cells, the dead cell becomes alive</li>
<li>if a live cell is surrounded by 3 or 4 live cells, it stays alive</li>
<li>in all other cases, the cell dies</li>
</ul>


<p>One of the interesting things about this set of rules is the absence of still life. The reason for this absence is that a cell can only be born under conditions where a live cell would otherwise die. This means that whenever a cell is born it is likely to kill its parents.</p>

<p>Hence the only known stable life forms in this set of rules at the moment are oscillators. No gliders have been found yet.</p>

<p>You can play with my implementation here: <a href="http://davidsiaw.github.io/hexlife/">http://davidsiaw.github.io/hexlife/</a></p>

<p>In my search for a glider in this set of rules, I found a bunch of oscillators and decided to record them:</p>

<table>
<thead>
<tr>
<th> Picture                                     </th>
<th> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="images/hexlife/2cell.png" alt="Alt text" />        </td>
<td> The <strong>2cell</strong> is the simplest and most common oscillator. It is left behind by almost any unstable life.</td>
</tr>
<tr>
<td><img src="images/hexlife/spinner.png" alt="Alt text" />      </td>
<td> The <strong>Spinner</strong> is another common oscillator that has a period of 2. It simply looks like it is spinning.</td>
</tr>
<tr>
<td><img src="images/hexlife/mouth.png" alt="Alt text" />        </td>
<td> The <strong>Mouth</strong> looks like a spinner but instead of 2nd level adjacent, they are 3rd level adjacent, so it looks like it is always opening and closing</td>
</tr>
<tr>
<td><img src="images/hexlife/needle.png" alt="Alt text" />       </td>
<td> The <strong>Needle</strong> has a period of 2 and flips back and forth.</td>
</tr>
<tr>
<td><img src="images/hexlife/dancer.png" alt="Alt text" />       </td>
<td> The <strong>Dancer</strong> has a period of 2 and looks like its swinging back and forth.</td>
</tr>
<tr>
<td><img src="images/hexlife/star.png" alt="Alt text" />         </td>
<td> The <strong>Star</strong> looks like a twinkling star. It is quite peculiar in the sense that it has a period of 3.</td>
</tr>
<tr>
<td><img src="images/hexlife/rotator.png" alt="Alt text" />      </td>
<td> The <strong>Rotator</strong> has a period of 4 and looks like it is spinning in a weird way.</td>
</tr>
<tr>
<td><img src="images/hexlife/bat.png" alt="Alt text" />          </td>
<td> The <strong>Bat</strong> is perhaps the most common 4-period oscillator you get from random starts.</td>
</tr>
<tr>
<td><img src="images/hexlife/snake.png" alt="Alt text" />        </td>
<td> The <strong>Snake</strong> is a period-4 oscillator that looks like a snake that wiggles around</td>
</tr>
<tr>
<td><img src="images/hexlife/morpher.png" alt="Alt text" />      </td>
<td> The <strong>Morpher</strong> is really simple but really interesting-looking oscillator. It has got a period of 12 and transforms into all its possible orientations. This means that even though it has no symmetry, it does not matter which way you orient it, it will achieve the same configurations. I call this temporal homogeneity.</td>
</tr>
<tr>
<td><img src="images/hexlife/tristar.png" alt="Alt text" />      </td>
<td> The <strong>Tristar</strong> is a period-12 oscillator that twinkles in a more elaborate way than the star.</td>
</tr>
<tr>
<td><img src="images/hexlife/swimmer.png" alt="Alt text" />      </td>
<td> The <strong>Swimmer</strong> is an oscillator with a period of 48. You can actually find it on the Wikipedia page I linked. It seems like a lost fish swimming back and forth.</td>
</tr>
</tbody>
</table>


<p>If you find more oscillators please leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Travis to deploy my blog]]></title>
    <link href="http://davidsiaw.github.io/blog/2014/10/30/using-travis-to-deploy-my-blog/"/>
    <updated>2014-10-30T01:07:00+00:00</updated>
    <id>http://davidsiaw.github.io/blog/2014/10/30/using-travis-to-deploy-my-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Travis-CI more and more as a platform from which I can deploy things, due to the fact that we can run any code on it. Today I made it so that this blog is deployed to gh-pages when pushed. I have also set up my personal blog to be pushed this way as well.</p>

<p>Why did I use Travis-CI instead of Shippable or other CI systems for this? Well, its mainly due to the fact that I was already using Travis, and the tools (specifically the Travis gem) are quite mature. Many of the things that are quite troublesome, like generating a key and placing decrypt commands into the .travis.yml, are now covered in simple command line instructions.</p>

<p>My blog uses Jekyll + Octopress, but I don&rsquo;t like the limitations imposed by github on the templates I can use. So I decided it was better to simply upload the finished product. First of all, I push all my blog sources up to a public repository at <a href="https://github.com/davidsiaw/davidsiaw.github.io.source">https://github.com/davidsiaw/davidsiaw.github.io.source</a></p>

<p>While the setup is easy, its not obvious that you can do this. Hopefully this will go some way to helping others who want to circumvent the github limitations on their gh-pages content as well.</p>

<p>In this post I will show you how to set it up. First of all, I create a key that will give push access to my blog&rsquo;s repository at <a href="https://github.com/davidsiaw/davidsiaw.github.io">https://github.com/davidsiaw/davidsiaw.github.io</a> by calling up <code>ssh-keygen</code></p>

<p><code>
nagatsuki david$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/david/.ssh/id_rsa): deploy_key
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in deploy_key.
Your public key has been saved in deploy_key.pub.
The key fingerprint is:
89:8d:a9:60:5c:8b:77:05:c4:2b:05:a4:96:64:8e:fa david@nagatsuki
The key's randomart image is:
+--[ RSA 2048]----+
|     .=+o        |
|     *  o.       |
|    = o. o.      |
| o = ..=.o       |
|  = . =.S        |
|   o o .         |
|    E            |
|                 |
|                 |
+-----------------+
</code></p>

<p>I then place the deploy_key.pub in my github repository.</p>

<p>Next, I make use of the Travis gem to encrypt my private key. I add the <code>--add</code> parameter to make it write to my .travis.yml (I am in the directory.)</p>

<p>```
nagatsuki david$ travis encrypt-file deploy_key &mdash;add
encrypting deploy_key for davidsiaw/davidsiaw.github.io
storing result as deploy_key.enc
storing secure env variables for decryption</p>

<p>Make sure to add deploy_key.enc to the git repository.
Make sure not to add deploy_key to the git repository.
Commit all changes to your .travis.yml.
```</p>

<p>This gives me a deploy_key.enc that is my encrypted private key.</p>

<p>In order to use this key, I need to add some more lines to <a href="https://github.com/davidsiaw/davidsiaw.github.io.source/blob/master/.travis.yml">.travis.yml</a> to enable it to push to github. First of all, I need to install the key into the .ssh folder so git can use it. I also chmod it so ssh will not complain.</p>

<p><code>yml
- chmod 600 deploy-key
- cp deploy-key ~/.ssh/id_rsa
</code></p>

<p>With this, I can now tell Travis to push the generated files. All I do is tell it to generate the site (since this is just Jekyll), and then call my <a href="https://github.com/davidsiaw/davidsiaw.github.io.source/blob/master/deploy">deploy script</a> which simply pushes the right stuff up to github.</p>

<p><code>
- bundle exec rake generate
- bash deploy
</code></p>

<p>With this, my website gets updated everytime I push my changes to <a href="https://github.com/davidsiaw/davidsiaw.github.io.source">https://github.com/davidsiaw/davidsiaw.github.io.source</a>, Travis will automatically update my blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog]]></title>
    <link href="http://davidsiaw.github.io/blog/2013/10/12/new-blog/"/>
    <updated>2013-10-12T16:03:00+00:00</updated>
    <id>http://davidsiaw.github.io/blog/2013/10/12/new-blog</id>
    <content type="html"><![CDATA[<p>As all of you may have noticed the theme has changed and the URL seems to have been redirected to Github. I decided to try out this github pages thing and it seems to work pretty well. The static content idea is really attractive to me and really gives me much more power over the pages with a small tradeoff for convenience. But convenience is a non-issue for most programmers who can write tools to make the inconvenient convenient.</p>

<p>What I want to talk about here is actually how I started doing this and why I ended up moving my blog across, along with what I learned along the way about Jekyll-Bootstrap, Octopress, Jekyll, the annoying problems and the process of migrating from a WordPress blog to a Octopress/Disqus duo.</p>

<!--more-->


<h2>1. Github Pages</h2>

<p>After a friend of mine started up his blog, I decided to give it a shot too. From searching around most of the Github pages around were set up as blogs. It seemed like that was a natural thing to do so I went on and used the Github automatic page generator.</p>

<p>The themes provided were incredibly high quality, and were easy to read on the iPhone. The syntax highlighting seemed to just work too so it seemed like everything was going to be good.</p>

<p>I soon realized that all the automatic page generator did was set up an index.html on the repository. I had to begin editing the html page myself and if I wanted an automatically updated sidebar of pages and posts, there needed to be some Liquid code in the pages that required that.</p>

<p>It started to seem like a pain for a blogging environment.</p>

<h2>2. Jekyll-bootstrap</h2>

<p>Believing in the power of existing tools, I was sure someone out there would have solved this problem for me. After googling around I found Jekyll-Bootstrap. It seemed fairly simple to set up, since it was simply a starting point with Rakefiles and preset templates for blogging. It also used pygments for syntax highlighting, and had theming support and plugins.</p>

<p><code>bash
$ rake new_post title="Rants of today"
$ rake new_page title="My new page"
$ rake preview
</code></p>

<p>You had to have an empty repository to start with Jekyll-bootstrap because it needs to dictate how things are in your blog. The easiest way to do this it seems is to begin your repository contents with the contents of Jekyll-bootstrap.</p>

<p><code>bash
$ git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.com
$ cd USERNAME.github.com
$ git remote set-url origin git@github.com:USERNAME/USERNAME.github.com.git
$ git push origin master
</code></p>

<p>The site, being a set of markdown and html files with Liquid markups would then simply be checked in to github where it would automatically be run through Jekyll and displayed.</p>

<p>The themes for Jekyll-bootstrap weren&rsquo;t as good as the ones you could find for Github, but that did not pose much of a problem. There also weren&rsquo;t many of them. It also turned out that besides the automatic page and post file generation and theme application, there wasn&rsquo;t much in terms of defaults. The index.md only had a simple example of listing posts, and if you wanted a sidebar and show posts on the index.html, or apply disqus to it, you had to do all of that yourself.</p>

<p><a href="http://themes.jekyllbootstrap.com/">Jekyll-bootstrap Themes</a></p>

<p><code>bash
$ rake theme:install git="https://github.com/dhulihan/hooligan.git"
</code></p>

<p>I was surprised at the seeming lack of extra examples that can be copy-pasted in to set the blog up. As it turns out jekyll-bootstrap hasn&rsquo;t been maintained for a while, since its maintainer has moved on to create another static site generator.</p>

<p>I set this aside on a different folder and proceeded to try the other alternative which seemed more used and still had an active community and maintainers.</p>

<h2>3. Octopress</h2>

<p>The alternative was Octopress. Octopress is different from Jekyll-bootstrap in the sense that it wasn&rsquo;t just a template for blogging sites. It is a small collection of tools that allow you to set themes and generate your site locally. Another difference is that the static site generation is actually done on your own PC, and you push the result to github. This means it would work for any other site, which was fairly attractive. Similar to Jekyll-bootstrap, you would fork Octopress and clone your modifications in to another repository, and not your site.</p>

<p>``` bash
$ git clone git://github.com/davidsiaw/octopress.git Octopress   # from my forked repository
$ cd octopress
$ gem install bundler
$ rbenv rehash
$ bundle install        # prepares the set of tools required to maintain your site
$ rake install          # generates your site&rsquo;s bootstrap sources</p>

<p>$ rake generate
$ rake deploy           # automatically creates a _deploy folder and pushes that to your site</p>

<p>$ git add .             # add the created sources and sass folders that contain the real sources for your site
$ git commit -m &ldquo;update sources&rdquo;
$ git pushes            # push your site&rsquo;s sources
```</p>

<p>Octopress also has a much larger set of themes available to use to customize your site. Like Jekyll-bootstrap, the theme is on a github repository that you can clone and install with.</p>

<p><a href="http://opthemes.com/">Octopress Theme Site</a></p>

<p>One big headache with Octopress was that its syntax highlighting was not part of the theme, and that the default theme was the Solarize theme which was fairly ugly and bluish. It also wasn&rsquo;t straightforward to configure. It turned out that the syntax configuration is in sass/<em>syntax.scss and the variables in it are stored in sass/</em>solarized.scss.</p>

<p><img src="/images/blogimages/solarized.png"></p>

<p>In order to solve this problem, some googling turned up some people solving this issue by <a href="http://blog.codebykat.com/2013/05/23/gorgeous-octopress-codeblocks-with-coderay/">switching the markdown generator to CodeRay</a>. But it did not change the theme for me and it seemed like a very messy change to have, so I decided to roll my sleeves up and edit the scss files myself, which came out pretty well.</p>

<h2>4. Wordpress Migration</h2>

<p>The final part of my blog setup was to see if I could transfer all the data from my old WordPress blog to this one. It turns out I could. <a href="http://jekyllrb.com/docs/migrations/">Jekyll had a set of tools</a> that allowed me to import the XML file produced by the WordPress export function. This automatically added the pages to source/<em>pages and posts to source/</em>posts in html format.</p>

<p>This is not desirable because in HTML format the newlines are ignored and the posts look fairly retarded, so I renamed all the extensions to .md.</p>

<p>``` bash
$ gem install jekyll-import &mdash;pre
$ gem install hpricot
$ ruby -rubygems -e &lsquo;require &ldquo;jekyll/jekyll-import/wordpressdotcom&rdquo;;</p>

<pre><code>JekyllImport::WordpressDotCom.process({ :source =&gt; "wordpress.xml" })'
</code></pre>

<p>```</p>

<p>However, the export was far from perfect. My WordPress install used a lot of plugins, meaning the content was littered with shortcodes that did not look like part of any content. I had to touch nearly every generated file that was imported to get everything nice and polished again.</p>

<h2>5. Disqus</h2>

<p>Disqus is a hosted commenting system that provides a very nice commenting theme that blends in to most Jekyll sites, that&rsquo;s the sole reason I chose it. I thought facebook comments were nice and would provide me with more exposure but it just looked ugly.</p>

<p>Setting Disqus up was fairly easy. It involved registering on Disqus and adding the shortcode of Disqus to the _config.yml. There was one very undocumented frustration though, the comments were not showing up. It turns out that instead of having trailing &lsquo;/&rsquo; on the URLs like other people who had this problem, the imported posts had no &lsquo;comments: true&rsquo; line on them! This meant Disqus was disabled for all those posts. I had to then go through all of the posts and add comments to enable Disqus.</p>

<p>Importing the Wordpress comments into Disqus was fairly trivial as there was a Disqus plugin for Wordpress that allowed us to pull all of the Wordpress plugins in. In addition, I could then rename the domains on all the comments that were associated with the Wordpress site to being associated to my site, which was a really handy tool to have.</p>

<h2>Conclusion</h2>

<p>Overall, this actually took an entire Saturday morning, which is pretty heavy for a &ldquo;Simple&rdquo; framework for blogging on static sites. The only thing that looked simple was the amount of stuff that you end up with on the website, which gives the impression that not a lot of work went into building the site.</p>

<p>I guess it wouldn&rsquo;t be too far fetched to say that even with top grade tools, if a little customization is required, the amount of work to set up a website increases exponentially in relation to the customization you do.</p>

<p>With blogging on the site, one of the things I miss is the ability to see images next to the text that I type, that Wordpress&rsquo;s web interface or <a href="http://labs.astrobunny.net/bunnyblogger">Bunnyblogger</a> affords.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nice Visualization of a Cross Product]]></title>
    <link href="http://davidsiaw.github.io/blog/2012/11/18/nice-visualization-of-a-cross-product/"/>
    <updated>2012-11-18T00:00:00+00:00</updated>
    <id>http://davidsiaw.github.io/blog/2012/11/18/nice-visualization-of-a-cross-product</id>
    <content type="html"><![CDATA[<p><a href="http://www.phy.syr.edu/courses/java-suite/crosspro.html">[This]</a> is a very nice Java applet that allows you to see what a cross product is. The applet shows A x B = C (i.e. C is the cross product of A and B) in 3 dimensions. You can drag A and B around to see the effects on C.</p>

<p>This UI is an example of very good interactivity. It makes it very easy for the user to see what happens and since its interactive, the feedback is instant and a little playing around with it gives the user an intuition of how cross products work (not how they are done).</p>

<p>Instead of a program where you enter numbers, dragging arrows around give you a much better view of whats going on, and allows the user to relate a real-life situation to it better too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIS data for topography and shorelines and more]]></title>
    <link href="http://davidsiaw.github.io/blog/2009/03/20/gis-data-for-topography-and-shorelines-and-more/"/>
    <updated>2009-03-20T00:00:00+00:00</updated>
    <id>http://davidsiaw.github.io/blog/2009/03/20/gis-data-for-topography-and-shorelines-and-more</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve <a href="http://www.ngdc.noaa.gov/mgg/topo/topo.html">found a site </a>recently that provides data for free on the world&rsquo;s shorelines and topography. They have got other datasets too that aren&rsquo;t as complete, but would probably be of interest to those of you who wish to do research on it. For me, when I look at data like this I get the itch to write programs that process and present it. I might just do that eventually. <em>keeps a note to self</em></p>
]]></content>
  </entry>
  
</feed>
