<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[./home/davidsiaw]]></title>
  <link href="https://davidsiaw.github.io/atom.xml" rel="self"/>
  <link href="https://davidsiaw.github.io/"/>
  <updated>2019-08-17T15:50:01+00:00</updated>
  <id>https://davidsiaw.github.io/</id>
  <author>
    <name><![CDATA[davidsiaw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working with mruby]]></title>
    <link href="https://davidsiaw.github.io/blog/2019/08/17/working-with-mruby/"/>
    <updated>2019-08-17T13:55:01+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2019/08/17/working-with-mruby</id>
    <content type="html"><![CDATA[<p>Having worked with Lua before and made a <a href="https://github.com/davidsiaw/luacppinterface">LuaCppInterface</a>, I decided about a year ago to start working on a C++ interface for mounting mruby as a scripting language.</p>

<p>To start, I have been developing in Ruby for several years now and I found it to be quite a pleasant language to work with. The particularly attractive thing about Ruby is its ability to create very clean DSLs. I have proceeded to use this to build some <a href="https://github.com/davidsiaw/sumomo">DSLs of</a> <a href="https://github.com/davidsiaw/weaver">my own</a>.</p>

<p>Despite the power of Ruby, it turned out to be incredibly hard to use as scripting language. However, recently a Japanese-Government-funded project <a href="http://www.mruby.org/">mruby</a> has been taking off and has headed into version 2.0.1. A year ago when I tried using it it was in version 1.4.0, and it was already in a fairly stable state. Since its syntax is meant to be compatible with Ruby 1.9 and its easy to compile into a C++ project, I decided to try it out.</p>

<h2>mruby-cpp</h2>

<p>To that end, I created <a href="https://github.com/davidsiaw/mruby-cpp">mruby-cpp</a> which provides a C++ frontend into mruby. Its still in beta as I trawl through the mruby C API and slowly gain an understanding of it. I&rsquo;ll continue to evolve it until it makes sense in both the C++ and mruby contexts.</p>

<h3>Simple introduction</h3>

<p>To start, <a href="https://github.com/davidsiaw/mruby-cpp">mruby-cpp</a> is a header-only C++ library. Just clone it into your sources as a submodule or copy it in and start using it. Your executable obviously needs to be linked with <code>libmruby.a</code>.</p>

<p>You can run scripts like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;mruby.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vm</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="s">&quot;puts &#39;hello ruby&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also set and get global variables, instance variables and class variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">vm</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="s">&quot;$a = 100;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">global_a</span> <span class="o">=</span> <span class="n">vm</span><span class="p">.</span><span class="n">get_global_variable</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;$a&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">vm</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="s">&quot;@a = 100;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">instance_a</span> <span class="o">=</span> <span class="n">vm</span><span class="p">.</span><span class="n">get_instance_variable</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;@a&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">vm</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="s">&quot;@@a = 100;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">class_a</span> <span class="o">=</span> <span class="n">vm</span><span class="p">.</span><span class="n">get_class_variable</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;@@a&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can bind your C++ classes and their methods to mruby, and specify constructor arguments too!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">Person</span><span class="p">(</span><span class="kt">int</span> <span class="n">age</span><span class="p">)</span> <span class="o">:</span> <span class="n">age</span><span class="p">(</span><span class="n">age</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">how_old</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">age</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">cls</span> <span class="o">=</span> <span class="n">vm</span><span class="p">.</span><span class="n">create_class</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;Person&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">cls</span><span class="p">.</span><span class="n">bind_instance_method</span><span class="p">(</span><span class="s">&quot;how_old&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Person</span><span class="o">::</span><span class="n">how_old</span><span class="p">);</span>
</span><span class='line'><span class="n">vm</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="s">&quot;puts Person.new(5).how_old&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully you will have a good idea of what I plan to achieve with this library. There are more examples in the <a href="https://github.com/davidsiaw/mruby-cpp/tree/master/tests">tests folder</a>.</p>

<h3>See the tests for more examples!</h3>

<p>All the capabilities of <a href="https://github.com/davidsiaw/mruby-cpp">mruby-cpp</a> are tested by the <a href="https://github.com/davidsiaw/mruby-cpp/tree/master/tests">tests</a> which are also really good examples of how to use <a href="https://github.com/davidsiaw/mruby-cpp">mruby-cpp</a>.</p>

<h2>mruby</h2>

<p>While I was writing this library, I&rsquo;ve learned a few things about mruby and actually about Ruby itself too.</p>

<h3>The C API isn&rsquo;t well documented</h3>

<p>One of the first things I realize when I started looking for ways to do things in mruby is its C API is sparsely documented. There are a bunch of comments in the headers but they are not nearly detailed enough.</p>

<p>A lot of functions have very abbreviated names such as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mrb_value</span> <span class="nf">mrb_vm_special_get</span><span class="p">(</span><span class="n">mrb_state</span><span class="o">*</span><span class="p">,</span> <span class="n">mrb_sym</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mrb_vm_special_set</span><span class="p">(</span><span class="n">mrb_state</span><span class="o">*</span><span class="p">,</span> <span class="n">mrb_sym</span><span class="p">,</span> <span class="n">mrb_value</span><span class="p">);</span>
</span><span class='line'><span class="n">mrb_value</span> <span class="nf">mrb_vm_cv_get</span><span class="p">(</span><span class="n">mrb_state</span><span class="o">*</span><span class="p">,</span> <span class="n">mrb_sym</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mrb_vm_cv_set</span><span class="p">(</span><span class="n">mrb_state</span><span class="o">*</span><span class="p">,</span> <span class="n">mrb_sym</span><span class="p">,</span> <span class="n">mrb_value</span><span class="p">);</span>
</span><span class='line'><span class="n">mrb_value</span> <span class="nf">mrb_vm_const_get</span><span class="p">(</span><span class="n">mrb_state</span><span class="o">*</span><span class="p">,</span> <span class="n">mrb_sym</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mrb_vm_const_set</span><span class="p">(</span><span class="n">mrb_state</span><span class="o">*</span><span class="p">,</span> <span class="n">mrb_sym</span><span class="p">,</span> <span class="n">mrb_value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I still don&rsquo;t know what <code>mrb_vm_special_get</code> mean, but I know <code>cv</code> means class variable and <code>const</code> means constant. These are the <code>vm</code> variations, which means they only access global scope. Strangely enough, matz removed <code>vm</code> variations for the instance variables. Not sure why that is the case.</p>

<p>Sometimes typenames are confusing and its not entirely clear how some types are converted to other types, such as <code>RProc*</code> and <code>mrb_value</code>.</p>

<h3>Difficulties I faced</h3>

<p>While writing mruby-cpp, I encountered some difficulty with unifying mruby objects. All things in mruby are objects but they are not treated that way in the API. This is something I still have to solve.</p>

<p>Contrast with Lua where it exposes its GC reference api allowing you to increment and decrement references to its objects, and allowing you to create your own objects on the Lua GC and reference them the same way. This means that you can basically have a variant of the <code>shared_pointer</code> but managed by the Lua GC.</p>

<p>In mruby when you create a function you are forced to assign it to a class with a name. However, you can create a <code>proc</code> but it has a transparent <code>self</code> keyword, which means its impossible to associate it to an object.</p>

<p>As a result, the easiest way to work with mruby-cpp right now is to create classes and bind functions to them so you can use them in mruby. It makes little to no sense creating a function and assigning it to a variable. I am still working on a nice way to do this, and I spent hours trying to find a way to pass a function to mruby as a callable object.</p>

<p>The differences between procs, objects, classes and modules also mean that it was difficult to create an <code>mruby::Object</code> class. Meaning, pure ruby objects cannot really be passed to C++ with mruby-cpp right now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jepsen and Docker]]></title>
    <link href="https://davidsiaw.github.io/blog/2018/08/16/jepsen-and-docker/"/>
    <updated>2018-08-16T00:06:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2018/08/16/jepsen-and-docker</id>
    <content type="html"><![CDATA[<p>Recently I have been reading a series of very interesting posts by an Aphyr who <a href="https://aphyr.com/tags/jepsen">tests distributed databases</a> and then publishes their performance under <a href="https://aphyr.com/posts/288-the-network-is-reliable">network partition</a> conditions, clock skews, dead nodes and other interesting failure conditions.</p>

<p>The tool he uses is called <a href="https://github.com/jepsen-io/jepsen">Jepsen</a> which he wrote himself, and the repo itself includes the set of tests that he used on various databases. After reading all the posts about how various supposedly industry-standard (I guess this is the industry standard) databases which claim to be quite reliable fail under precisely the conditions they are not supposed to fail under, I decided to try the tool out myself and document the experience.</p>

<p>My first thought about this tool was that it would be a great application of Docker, and it turns out he had already written a <a href="https://github.com/jepsen-io/jepsen/tree/master/docker">Docker harness for Jepsen</a>. This was great since you could do all sorts of things in the container environment of Docker and still simulate network partitions and all those nasty things without needing too much hardware.</p>

<p>I checked out Jepsen and ran the scripts the way it told me to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">sh</span> <span class="n">up</span><span class="o">.</span><span class="n">sh</span>
</span><span class='line'><span class="o">[</span><span class="no">INFO</span><span class="o">]</span> <span class="no">Generating</span> <span class="n">key</span> <span class="n">pair</span>
</span><span class='line'><span class="no">Generating</span> <span class="kp">public</span><span class="o">/</span><span class="kp">private</span> <span class="n">rsa</span> <span class="n">key</span> <span class="n">pair</span><span class="o">.</span>
</span><span class='line'><span class="no">Your</span> <span class="n">identification</span> <span class="n">has</span> <span class="n">been</span> <span class="n">saved</span> <span class="k">in</span> <span class="o">.</span><span class="n">/secret</span><span class="o">/</span><span class="n">id_rsa</span><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then it goes off and builds a bunch of containers from scratch.</p>

<p><img src="https://davidsiaw.github.io/images/blogimages/notlike.png" alt="Alt text" /></p>

<p>Then at the very end (after maybe 15 mins of downloading and installing) it goes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>.
</span><span class='line'>.
</span><span class='line'>jepsen-control <span class="p">|</span> Please run <span class="sb">`</span>docker <span class="nb">exec</span> -it jepsen-control bash<span class="sb">`</span> in another terminal to proceed.
</span></code></pre></td></tr></table></div></figure>


<p>Excellent I can run it now!</p>

<p>So I open another terminal and type it in and instantly I&rsquo;m transported to where I should be to start working with Jepsen. Hooray!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker <span class="nb">exec</span> -it jepsen-control bash
</span><span class='line'>Welcome to Jepsen on <span class="nv">Docker</span>
</span><span class='line'><span class="o">===========================</span>
</span><span class='line'>
</span><span class='line'>This container runs the Jepsen tests in sub-containers.
</span><span class='line'>
</span><span class='line'>You are currently in the base dir of the git repo <span class="k">for</span> Jepsen.
</span><span class='line'>If you modify the core jepsen library make sure you <span class="s2">&quot;lein install&quot;</span> it so other tests can access.
</span><span class='line'>
</span><span class='line'>To run a <span class="nb">test</span>:
</span><span class='line'>   <span class="nb">cd </span>etcd <span class="o">&amp;&amp;</span> lein run <span class="nb">test</span> --concurrency 10
</span><span class='line'>root@control:/jepsen#
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try the next command. It looks to me like I should try running the test on etcd with 10 clients?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cd etcd &amp;&amp; lein run test --concurrency 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>It then goes off and spews a large amount of output</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>16:09:00.452 <span class="o">[</span>main<span class="o">]</span> INFO  jepsen.cli - Test options:
</span><span class='line'> <span class="o">{</span>:concurrency 10,
</span><span class='line'> :test-count 1,
</span><span class='line'> :time-limit 60,
</span><span class='line'> :nodes <span class="o">[</span><span class="s2">&quot;n1&quot;</span> <span class="s2">&quot;n2&quot;</span> <span class="s2">&quot;n3&quot;</span> <span class="s2">&quot;n4&quot;</span> <span class="s2">&quot;n5&quot;</span><span class="o">]</span>,
</span><span class='line'> :ssh
</span><span class='line'> <span class="o">{</span>:username <span class="s2">&quot;root&quot;</span>,
</span><span class='line'>  :password <span class="s2">&quot;root&quot;</span>,
</span><span class='line'>  :strict-host-key-checking <span class="nb">false</span>,
</span><span class='line'>  :private-key-path nil<span class="o">}}</span>
</span><span class='line'>.
</span><span class='line'>.
</span><span class='line'>.
</span></code></pre></td></tr></table></div></figure>


<p>It basically goes off and does a large number of reads and writes. At the very end, it comes back with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Analysis invalid! <span class="o">(</span>ﾉಥ益ಥ）ﾉ ┻━┻
</span></code></pre></td></tr></table></div></figure>


<p>Wow that was quick. I did not expect to run into an etcd problem so fast. I did not even specify any failures.</p>

<p>Seems like I had some code to read. After fumbling around I discovered the <a href="https://github.com/jepsen-io/jepsen/blob/master/etcd/src/jepsen/etcd.clj#L159">source file</a>.</p>

<p>Aha.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">...</span>
</span><span class='line'><span class="p">(</span><span class="nb">merge </span><span class="nv">tests/noop-test</span>
</span><span class='line'>         <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;etcd&quot;</span>
</span><span class='line'>          <span class="ss">:os</span> <span class="nv">debian/os</span>
</span><span class='line'>          <span class="ss">:db</span> <span class="p">(</span><span class="nf">db</span> <span class="s">&quot;v3.1.5&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="ss">:client</span> <span class="p">(</span><span class="nf">client</span> <span class="nv">nil</span><span class="p">)</span>
</span><span class='line'>          <span class="ss">:nemesis</span> <span class="p">(</span><span class="nf">nemesis/partition-random-halves</span><span class="p">)</span>
</span><span class='line'>          <span class="ss">:model</span>  <span class="p">(</span><span class="nf">model/cas-register</span><span class="p">)</span>
</span><span class='line'><span class="nv">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like the Jepsen nemesis was baked into the test script. Well thats fine for now.</p>

<h2>Knossos</h2>

<p>The next step basically to me was to find out what was wrong. There was a large amount of data output so there must be a tool of some sort that can tell me what was wrong. (Or so I imagined)</p>

<p>After a bit of googling I came across another project called <a href="https://github.com/jepsen-io/knossos">Knossos</a>.</p>

<p>I didn&rsquo;t know very much about Clojure so I just followed through the README anyway. So first I cloned knossos</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># git clone https://github.com/jepsen-io/knossos</span>
</span><span class='line'><span class="c"># cd knossos</span>
</span></code></pre></td></tr></table></div></figure>


<p>I dug around to find the .edn file from my Jepsen run and discovered it in /jepsen/etcd/store/latest/history.edn</p>

<p>Then I ran the command in the README</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># lein run --model cas-register /jepsen/etcd/store/latest/history.edn </span>
</span><span class='line'>/jepsen/etcd/store/latest/history.edn <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent. Yes. I knew that.</p>

<p>Scrolling down a little in the README I discovered it could generate the linearizability graph too. That was cool so I tried, by following the code in the README</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@control:/knossos# lein repl
</span><span class='line'>nREPL server started on port <span class="m">37400</span> on host 127.0.0.1 - nrepl://127.0.0.1:37400
</span><span class='line'>REPL-y 0.3.7, nREPL 0.2.12
</span><span class='line'>Clojure 1.8.0
</span><span class='line'>OpenJDK 64-Bit Server VM 1.8.0_181-8u181-b13-0ubuntu0.16.04.1-b13
</span><span class='line'>    Docs: <span class="o">(</span>doc <span class="k">function</span>-name-here<span class="o">)</span>
</span><span class='line'>          <span class="o">(</span>find-doc <span class="s2">&quot;part-of-name-here&quot;</span><span class="o">)</span>
</span><span class='line'>  Source: <span class="o">(</span><span class="nb">source </span><span class="k">function</span>-name-here<span class="o">)</span>
</span><span class='line'> Javadoc: <span class="o">(</span>javadoc java-object-or-class-here<span class="o">)</span>
</span><span class='line'>    Exit: Control+D or <span class="o">(</span><span class="nb">exit</span><span class="o">)</span> or <span class="o">(</span>quit<span class="o">)</span>
</span><span class='line'> Results: Stored in vars *1, *2, *3, an exception in *e
</span></code></pre></td></tr></table></div></figure>


<p>I am then dropped into the Clojure prompt, where I try clumsily to guess how things are done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">knossos.cli=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">h</span> <span class="p">(</span><span class="nf">read-history</span> <span class="s">&quot;/jepsen/etcd/store/latest/history.edn&quot;</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;knossos.cli/h</span>
</span><span class='line'><span class="nv">knossos.cli=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">a</span> <span class="p">(</span><span class="nf">competition/analysis</span> <span class="p">(</span><span class="nf">model/cas-register</span><span class="p">)</span> <span class="nv">h</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;knossos.cli/a</span>
</span><span class='line'><span class="nv">knossos.cli=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">knossos.linear.report</span> <span class="ss">:as</span> <span class="nv">report</span><span class="p">])</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">knossos.cli=&gt;</span> <span class="p">(</span><span class="nf">report/render-analysis!</span> <span class="nv">h</span> <span class="nv">a</span> <span class="s">&quot;linear.svg&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">AssertionError</span> <span class="nv">Assert</span> <span class="nv">failed</span><span class="err">:</span> <span class="nv">No</span> <span class="nv">invocation</span> <span class="nb">for </span><span class="nv">op</span> <span class="p">{</span><span class="ss">:process</span> <span class="mi">2</span>, <span class="ss">:type</span> <span class="ss">:ok</span>, <span class="ss">:f</span> <span class="ss">:read</span>, <span class="ss">:value</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">4</span><span class="p">]</span>, <span class="ss">:index</span> <span class="mi">12</span>, <span class="ss">:time</span> <span class="mi">421990474</span><span class="p">}</span>
</span><span class='line'><span class="nv">inv</span>  <span class="nv">knossos.linear.report/time-coords/fn--5143</span> <span class="p">(</span><span class="nf">report.clj</span><span class="ss">:186</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, I had no idea what that meant. Looks like there are still kinks.</p>

<h2>Thoughts</h2>

<p>In short I have a few thoughts:</p>

<ol>
<li>Using docker for this is way cool</li>
<li>The analysis tool sucks</li>
<li>This can be so much more general</li>
</ol>


<h3>Using docker is way cool</h3>

<p>While Aphyr says that he uses his own LXC stuff to work with, I think its cool that he does provide a Docker interface. However he isn&rsquo;t taking advantage of a few things docker can do:</p>

<ol type="a">
<li>Prebuilt docker containers</li>
<li>Networking in docker that can be used to simulate faults</li>
<li>Skewing clocks in the container</li>
<li>Adding and removing new containers, simulating scaling effects and changing configuration</li>
</ol>


<p>It is probably because the tool is in its early stages of development, and really he knows how to use it the best, so he can do his stuff the best. But I can&rsquo;t help but feel he himself would benefit from some improvement in this domain. Perhaps he does not use it right now, or maybe he does in another way. I&rsquo;ve only sat with this code for the last 4 hours.</p>

<h3>The analysis tool sucks</h3>

<p>It needs to recover from weird errors nicely and maybe still present some amount of information. Unfortunately it doesn&rsquo;t, so I will need to spend some time figuring out what I did wrong. Once I get it then I will be able to truly start analysing databases myself.</p>

<h3>This can be so much more general</h3>

<p>All in all it looks like a large amount of the code done here is still quite research quality and tests, while composable seemed like they had to be baked into the testing code still. On the surface it felt to me that skew clocks, network failures, network delays and failing environments were things that did not have to be part of the test and could be external.</p>

<p><strong> None of this makes any of Jepsen less cool </strong></p>

<p>In my opinion all one should really need to do is specify what to do in order to perform a read, write or CAS, and the testing tool should attempt a combination of the three to figure out how a database puts up with it.</p>

<p>Its also likely to be the case because different databases are different. Some are queues, some are data structures, some are RDBMS and some are key value stores. However they all should have the same idea that storing data stores, and automated analysis that shows if it is CP or AP and how would be incredible. This is something I might work on in a later post when I have time.</p>

<h2>Conclusions</h2>

<p>The world needs more of these. This run was an eye-opener to real simulations of faults, and also the idea that distributed databases are actually extremely hard to understand and build. It also has shown me how one person who makes an effort to do something advanced and difficult and documents it in a clear manner can so quickly change the landscape of a field.</p>

<p>Thanks to him I am sure I and a large number of people now understand the definitions and jargon behind distributed databases which have been hidden behind walls of text in white papers and difficult to read (read longwinded) articles, and this really opens the door to helping people build better and more resilient systems.</p>

<p>This probably will not be the last post on distributed databases on the blog as I, as are many others, interested in how things can scale safely. We have more or less solved it for webservers, but scaling databases, that is clearly a different beast.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Utilitarian View on Intelligence]]></title>
    <link href="https://davidsiaw.github.io/blog/2016/04/09/an-utilitarian-view-on-intelligence/"/>
    <updated>2016-04-09T22:56:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2016/04/09/an-utilitarian-view-on-intelligence</id>
    <content type="html"><![CDATA[<p>The recent victories of AlphaGo has been but an interesting demonstration that machines are finally able to outplay masters at a highly complex game. Some may consider this to be the beginning of a real takeover of machines ala The Terminator, which to me is simply a fear of that which we do not understand.</p>

<p>As one of the many traits we can assign to people, intelligence is just one of them. However it seems to be a very valuable and desirable trait to many, and people often seek to measure this &ldquo;intelligence&rdquo; to order people by usefulness. Intelligence is measured in many different ways, from highly formal methods such as IQ tests to empirical rules judging by their personalities or the company they keep.</p>

<p>However let us first understand that intelligence is indeed valuable and while measuring it accurately may not be easy, measuring its value may be easier. How do we do this? We can try a very simple form of intelligence that we have developed ourselves called &ldquo;artificial intelligence&rdquo;.</p>

<p>Artificial intelligence comes in many different forms such as a computer player in games, sudoku solvers, self driving cars, the ability to read and parse written text and so on. However even with this many forms of artificial intelligence, their value is always a measure of the quality of their decisions in the domain. For example, an AI that is capable of beating most players at a game is considered better than an AI that does not. A self driving car that has less accidents on the road has a higher value than those that have more accidents. In essence the final value of a machine driven by some form of AI is always measured by its track record of decisions and results.</p>

<p>Thus the real value of an AI is the quality of the decisions it forms.</p>

<p>So what has AI really got to do with human intelligence? Well, I believe that AI and human intelligence actually are similar and almost equivalent in their playing field.</p>

<p>In its most degenerate form, being able to count is a quality humans learn and find useful, and which humans will practice in many fields. However, under fatigue, a human may count wrongly and this may result in bad decisions. Machines have mostly replaced humans in this regard due to their ability to more consistently count without errors (notwithstanding their ability to do it faster). This explains the great drop in secretaries and clerical jobs.</p>

<p>As time goes by the number of machines that can more consistently make better decisions about the actions they have to take will increase, and humans are forced to compete with this. After the industrial revolution, the value of labor has actually steadily dwindled as energy becomes more available and machines allow the conversion of energy sources into more kinds of value. Our value is more and more tied to the quality and weight of our decisions.</p>

<p>High level managers in companies and leaders are often held at a higher value than those who perform labor intensive tasks such as transporting due to the low value of labor and the high value of decisions. Certain labor intensive jobs do not have high value but are still performed by humans because humans are still capable of making decisions on the job that are better than machines, such as janitors and construction work, although cleaning is slowly being taken over by machines as exemplified by robots such as the Roomba.</p>

<p>In many ways we are already competing with machines to show that human decisions are still better than machine decisions in many fields. This means that if we were to assign a dollar value to machines that can do a particular work as well as a human being, that dollar value will be assigned to a human being in that field of work as well, essentially proving the equivalence of an AI and human intelligence in their ability to make decisions.</p>

<p>We are now in constant competition with machines to demonstrate our value through our ability to make better decisions on the actions we make, so the real value of human intelligence and thus the human who has that intelligence is also the quality of the decisions it makes him make, equivalent to the value of artificial intelligence itself.</p>

<p>IQ tests and apitude examinations have seemed to miss the point of intelligence and tested for a more abstract and less substantial quality of humans.</p>

<p>So in many ways, our old view of hard work as a good quality of a person falls in the face of scrutiny when we consider the modern realities we live in. Leaving decisions to another has always been tolerated, and blame and responsibility assigned to another, when the true value of our place in society actually comes from the decisions we make. The application of hard work is also a decision we often have to make but allow others to make for us. Perhaps we should begin to teach children less about working hard and more about learning to make good decisions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotating Integrals]]></title>
    <link href="https://davidsiaw.github.io/blog/2015/12/22/rotating-integrals/"/>
    <updated>2015-12-22T01:11:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2015/12/22/rotating-integrals</id>
    <content type="html"><![CDATA[<p><em>This post assumes you know some trigonometry and can do some integral calculus on it.</em></p>

<p>My little brother in college complained about sines and cosines in an indefinite integral today. Specifically, an integration that he was annoyed with was:</p>

<p>\[\int{x^3\,sin(x)\,dx}\]</p>

<p>It sounded like a whine at first but upon closer inspection, his complaints are not unwarranted. This is indeed a troublesome kind of indefinite integral. There is a trick to doing it quickly, but let us try and perform this particular integration normally first:</p>

<p>Since this is integration of the product of two functions, we perform integration by parts.</p>

<p>\[\int{u\,dv} = uv\, - \int{v\,du}\]</p>

<p>I choose \(u = x^3\) and \(dv = sin(x)\,dx\) mostly to avoid having to integrate the \(x^3\) and have fractions mess up my working.</p>

<p>This results in:</p>

<p>\[
\begin{aligned}
 u &amp; = x^3 \cr
 du &amp; = 3x^2\,dx \cr
 dv &amp; = sin(x)\,dx \cr
 v &amp; = -cos(x)
\end{aligned}
\]</p>

<p>Hence:</p>

<p>\[
\begin{aligned}
 \int{u\,dv} &amp; = uv\, - \int{v\,du} \cr
 &amp; = -x^3\,cos(x)\, - \int{–3x^2 cos(x)\,dx} \cr
 &amp; = -x^3\,cos(x) + \int{3x^2 cos(x)\,dx}
\end{aligned}
\]</p>

<p>We seem to have ended up with another integral to solve: \(\int{cos(x)(3x^2)\,dx}\), so we shall proceed to solve it.</p>

<p>\[
\begin{array}{cc}
 \begin{aligned}
  \int{u\,dv} &amp; = uv\, - \int{v\,du} \cr
  \int{3x^2 cos(x)\,dx} &amp; = 3x^2 sin(x)\, - \int{6x\,sin(x)\,dx}
 \end{aligned} &amp;
 \begin{aligned}
  u &amp; = 3x^2 \cr
  du &amp; = 6x\,dx \cr
  dv &amp; = cos(x)\,dx \cr
  v &amp; = sin(x)
 \end{aligned}
\end{array}
\]</p>

<p>How vexing. We have yet another integral to solve. Let us proceed anyway.</p>

<p>\[
\begin{array}{cc}
 \begin{aligned}
  \int{u\,dv} &amp; = uv\, - \int{v\,du} \cr
  \int{6x\,sin(x)\,dx} &amp; = -6x\,cos(x)\, - \int{-6\,cos(x)\,dx} \cr
  \int{6x\,sin(x)\,dx} &amp; = -6x\,cos(x) + \int{6\,cos(x)\,dx}
 \end{aligned} &amp;
 \begin{aligned}
  u &amp; = 6x \cr
  du &amp; = 6\,dx \cr
  dv &amp; = sin(x)\,dx \cr
  v &amp; = -cos(x)
 \end{aligned}
\end{array}
\]</p>

<p>Once again, we have to solve another integral. This one seems to be the last though, because the x term has withered away into oblivion, it becomes a trivial integral.</p>

<p>\[
\begin{aligned}
 \int{6x\,sin(x)\,dx} &amp; = -6x\,cos(x) + \int{6\,cos(x)\,dx} \cr
 &amp; = -6x\,cos(x) + 6\int{cos(x)\,dx} \cr
 &amp; = -6x\,cos(x) + 6\,sin(x)
\end{aligned}
\]</p>

<p>Bringing it all together, we have:</p>

<p>\[
\begin{aligned}
 \int{x^3\,sin(x)\,dx} &amp; = -x^3\,cos(x) + \int{3x^2 cos(x)\,dx} \cr
 &amp; = -x^3\,cos(x) + 3x^2 sin(x)\, - \int{6x\,sin(x)\,dx} \cr
 &amp; = -x^3\,cos(x) + 3x^2 sin(x)\, - [-6x\,cos(x) + \int{6\,cos(x)\,dx}] \cr
 &amp; = -x^3\,cos(x) + 3x^2 sin(x)\, - [-6x\,cos(x) + 6\,sin(x)] \cr
 &amp; = -x^3\,cos(x) + 3x^2 sin(x)\, + 6x\,cos(x) - 6\,sin(x)
\end{aligned}
\]</p>

<p>Phew! Basically due to the fact that you have to integrate by parts as many times as the <em>power of x</em>, the amount of integration you have to do increases proportionally to x&rsquo;s power, making it troublesome.</p>

<h2>A Closer Look</h2>

<p>However, if you have been following the working closely, you will notice that all we are really doing when we integrate by parts is performing a derivative of both parts over and over again. Notice how the \(sin(x)\) term keeps flipping between \(sin(x)\) and \(cos(x)\).</p>

<p>Better yet, if you differentiate \(sin(x)\) 4 times, the entire thing rotates back to \(sin(x)\) again. Since we integrated \(sin(x)\) 4 times in this example, that is exactly what happened. I call this kind of integral a <strong>Rotating Integral</strong> because the trigonometric term constantly rotates between the four combinations of negative and positive, \(sin(x)\) and \(cos(x)\).</p>

<p>Notice also that the \(u\) term we chose right at the beginning was differentiated at every step until it became a constant:</p>

<p>\[x^3\,\rightarrow\,3x^2\,\rightarrow\,6x\,\rightarrow\,6\]</p>

<p>If we factorize the result, we get the following:</p>

<p>\[
 -x^3\,cos(x) + 3x^2 sin(x)\, + 6x\,cos(x) - 6\,sin(x) = (-x^3 + 6x)\,cos(x) + (3x^2 - 6)\,sin(x)
\]</p>

<p>Notice how there is a negative term in both the \(sin(x)\) and \(cos(x)\) groups. Since the starting \(u\) we chose was positive, we can see the \(sin(x)\) go through</p>

<p>\[-cos(x)\,\rightarrow\,-sin(x)\,\rightarrow\,cos(x)\,\rightarrow\,sin(x)\]</p>

<p>We can see a pattern of repeating derivatives distributed among the \(sin(x)\) and \(cos(x)\) groups. If we recognize that</p>

<p>\[
\begin{array}{cc}
 x^3 &amp;\rightarrow\,3x^2 &amp;\rightarrow\,6x &amp;\rightarrow\,6 \cr
 f &amp;\rightarrow\,f^\prime &amp;\rightarrow\,f^{\prime \prime} &amp;\rightarrow\,f^{\prime \prime \prime} \cr
\end{array}
\]</p>

<p>And from our rearranged result,</p>

<p>\[
(-f + f^{\prime \prime})\,cos(x) + (f^\prime - f^{\prime \prime \prime})\,sin(x)
\]</p>

<p>This peaked my interest, and I decided to check the results of other powers of x:</p>

<p>\[
\begin{array}{cc}
3 &amp; (-x^3 + 6x)\,cos(x) &amp; + (3x^2 - 6)\,sin(x) \cr
4 &amp; (-x^4 + 12x^2 - 24)\,cos(x) &amp; + (4x^3 - 24x)\,sin(x) \cr
5 &amp; (-x^5 + 20x^3 - 120x)\,cos(x) &amp; + (5x^4 - 60x^2 + 120)\,sin(x) \cr
6 &amp; (-x^6 + 30x^4 - 360x^2 + 720)\,cos(x) &amp; + (6x^5 - 120x^3 + 720x)\,sin(x) \cr
7 &amp; (-x^7 + 42x^5 - 840x^3 + 5040x)\,cos(x) &amp; + (7x^6 - 210x^4 + 2520x^2 - 5040)\,sin(x)
\end{array}
\]</p>

<h2>The Solution!</h2>

<p>After doing some more wolframming, I found that we have a general solution of:</p>

<p>\[
\int{f\,sin(x)\,dx} = (- f + f^{\prime \prime} - f^{\prime \prime \prime \prime} + \cdots - f^{\prime2n})\,cos(x) + (f^{\prime} - f^{\prime \prime \prime} + f^{\prime \prime \prime \prime \prime} - \cdots + f^{\prime2n+1})\,sin(x)
\]</p>

<p>Where odd numbered differentials are on the \(sin(x)\) group and even numbered differentials are on the \(cos(x)\) group, and each differential alternates between negative and positive signs. The \(sin(x)\) group starts with a positive sign while the \(cos(x)\) starts with a negative sign.</p>

<p>Of course, the same rule slightly modified works for the \(cos(x)\) form:</p>

<p>\[
\int{f\,cos(x)\,dx} = (f - f^{\prime \prime} + f^{\prime \prime \prime \prime} - \cdots + f^{\prime2n})\,sin(x) + (f^{\prime} - f^{\prime \prime \prime} + f^{\prime \prime \prime \prime \prime} - \cdots + f^{\prime2n+1})\,cos(x)
\]</p>

<p>Note that this only works if \(f\) eventually derives into 0, and if the trigonometric function is \(sin(x)\) or \(cos(x)\). Otherwise you will need another method of finding the solution.</p>

<h2>Weird Application</h2>

<p>With this we can try and verify that what I said was true by trying to use it on a very special function that does not change even when under differentiation: \(e^x\). Even though I said this only works if it eventually derives to zero, let us try anyway:</p>

<p>So for this let us try the following function:</p>

<p>\[\int{e^x\,sin(x)\,dx}\]</p>

<p>This should give us</p>

<p>\[
\begin{align}
 \int{e^x\,sin(x)\,dx} &amp; = (- e^x + e^x - e^x + \cdots)\,cos(x) + (e^x - e^x + e^x - \cdots)\,sin(x) &amp; \cr
  &amp; = (- e^x + e^x - e^x + \cdots)\,cos(x) - (-e^x + e^x - e^x + \cdots)\,sin(x) &amp; \text{If we flip the sign}\cr
  &amp; = (- e^x + e^x - e^x + \cdots)(cos(x) - sin(x)) &amp; \text{Hence} \cr
  &amp; = (-1+1-1+\cdots)(e^x)(cos(x) - sin(x)) &amp;
\end{align}
\]</p>

<p>We are left with a strange, almost nonsensical looking sum that looks like it should evaluate to zero, but does it?</p>

<p>\[
\begin{align}
 S &amp; = -1+1-1+1-1+1\cdots \cr
 S &amp; = -1-S \cr
 2S &amp; = -1 \cr
 S &amp; = -\frac{1}{2} \cr
\end{align}
\]</p>

<p>Oh so that infinite sum actually evaluates to \(-\frac{1}{2}\). This may seem dubious but proving that is outside the scope of this post. (Lots of people have done it anyway.) This just means that our thing above should look like this:</p>

<p>\[
\begin{align}
 \int{e^x\,sin(x)\,dx}&amp; = (-1+1-1+\cdots)(e^x)(cos(x) - sin(x)) \cr
 &amp; = -\frac{1}{2}(e^x)(cos(x) - sin(x)) \cr
 &amp; = \frac{1}{2}(e^x)(sin(x)-cos(x)) \cr
\end{align}
\]</p>

<p>But is this correct? We must try and check again that we did not just stumble on nonsense.</p>

<h2>Verifying again</h2>

<p>To verify, let us perform it again with good ol' integration by parts.</p>

<p>\[\int{e^x\,sin(x)\,dx}\]</p>

<p>\[
\begin{array}{cc}
 \begin{aligned}
  \int{u\,dv} &amp; = uv\, - \int{v\,du} \cr
  \int{sin(x)(e^x)\,dx} &amp; =  sin(x)(e^x)\, - \int{e^x\,cos(x)\,dx}
 \end{aligned} &amp;
 \begin{aligned}
  u &amp; = sin(x) \cr
  du &amp; = cos(x)\,dx \cr
  dv &amp; = e^x\,dx \cr
  v &amp; = e^x
 \end{aligned}
\end{array}
\]</p>

<p>We have to do this integration again for \(cos(x)\), so let us do so.</p>

<p>\[
\begin{array}{cc}
 \begin{aligned}
  \int{u\,dv} &amp; = uv\, - \int{v\,du} \cr
  \int{e^x\,cos(x)\,dx} &amp; =  cos(x)(e^x)\, + \int{e^x\,sin(x)\,dx}
 \end{aligned} &amp;
 \begin{aligned}
  u &amp; = cos(x) \cr
  du &amp; = -sin(x)\,dx \cr
  dv &amp; = e^x\,dx \cr
  v &amp; = e^x
 \end{aligned}
\end{array}
\]</p>

<p>Substituting back, we get:</p>

<p>\[
\begin{aligned}
 \int{sin(x)(e^x)\,dx} &amp; = sin(x)(e^x)\, - \int{e^x\,cos(x)\,dx} \cr
 &amp; = sin(x)(e^x)\, - cos(x)(e^x)\, - \int{e^x\,sin(x)\,dx} \cr
 2\int{sin(x)(e^x)\,dx} &amp; = sin(x)(e^x)\, - cos(x)(e^x) \cr
 \int{sin(x)(e^x)\,dx} &amp; = \frac{1}{2}(e^x)(sin(x)-cos(x))
\end{aligned}
\]</p>

<p>Which is the same result we got before, proving that we didn&rsquo;t screw up.</p>

<p>With this, you can find the indefinite integral of expressions of this form by simply differentiating the non-trigonometric side. You can also use identities, factorizations and other ways to rearrange an expression into this form to use this technique to integrate this otherwise troublesome class of <strong>Rotating Integrals</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Square Roots]]></title>
    <link href="https://davidsiaw.github.io/blog/2015/06/12/finding-square-roots/"/>
    <updated>2015-06-12T01:36:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2015/06/12/finding-square-roots</id>
    <content type="html"><![CDATA[<p>Most of us has at some point in our lives used the <code>Math.sqrt()</code> function. We would even know that \(\sqrt{2} = 1.414\ldots\). However, we never really give how it is implemented a second thought. Thus is the power of a tight abstraction. For those of us who lived in the age of calculators, finding square roots has always been a source of mystery. For me during my teenage years, calculating a square root has really just been about looking up a numeric table.</p>

<p><img src="https://davidsiaw.github.io/images/log8.jpg" alt="Table of Square Roots" /></p>

<p>Obviously this very simple problem would have been solved close to the beginnings of civilization, and blazingly fast methods must already exist. But for sake of exploration, let us examine how we would implement a square root function should we need to.</p>

<p>\[\sqrt{-n} = \sqrt{-1} \sqrt{n}\]</p>

<p>Since square roots of negative numbers are really just square roots of positive numbers times the square root of a negative number, let us focus our efforts on finding just the square roots of positive real numbers.</p>

<p><img src="https://davidsiaw.github.io/images/square.png" alt="y=x^2" /></p>

<p>One way to find a square root is by looking at this graph of \(y=x^2\). Simply drawing a horizontal line from the y-axis from whose square root we desire to the graph line, and then find the intersect on the x-axis. So say we want \(\sqrt{30}\).</p>

<p><img src="https://davidsiaw.github.io/images/sqrt30.png" alt="find sqrt 30" /></p>

<p>We simply draw a line from the y-axis at 30 to the graph and find that it is located somewhere between 5.4 and 5.6 along the x-axis, but closer to 5.4. This makes sense. A quick glance at <a href="https://www.google.co.jp/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=sqrt(30">google</a>) shows \(\sqrt{30} = 5.4772255\)</p>

<p><img src="https://davidsiaw.github.io/images/binaryguessing.png" alt="find sqrt 30" /></p>

<p>This in-betweenness tells us something about square roots. Besides the nice square roots, the ugly ones don&rsquo;t seem to have any end to their decimals. Hence, they are always in between two numbers that we know. This means that we can keep making educated guesses about where the square root is until we get close enough.</p>

<p>\[0 &lt; \sqrt{30} &lt; 30\]</p>

<p>Let&rsquo;s apply this knowledge first and do the calculation by hand for the number 30 since we know its answer so we can verify that our method is correct.</p>

<p>First of all, we must figure out where the root is. Obviously, it would be less than 30, since you need to multiply it by itself to get 30. Its also more than zero, because as mentioned earlier, you will always end up with a positive number.</p>

<p>\[\sqrt{30} \approx 15?\]</p>

<p>The number most in between of 0 and 30 is 15. But is this the number? The only way to check is by squaring 15.</p>

<p>\[15^2 = 225\]</p>

<p>Nope. Not even close. 225 is waaay too big. But this tells us something: the root cannot be bigger than 15 because if it was, we would get an even bigger square than 30, so we must look to the left of 15. This means our upper bound is now 15 instead of 30.</p>

<p>\[0 &lt; \sqrt{30} &lt; 15\]</p>

<p>The number in the middle this time is 7.5. Is this our number?</p>

<p>\[7.5^2 = 56.25\]</p>

<p>Still too big. This means our root must be smaller than 7.5, but still bigger than zero.</p>

<p>\[0 &lt; \sqrt{30} &lt; 7.5\]</p>

<p>The number in the middle of 7.5 is 3.75. Perhaps this is our number?</p>

<p>\[3.75^2 = 14.0625\]</p>

<p>It seems the square of 3.75 is smaller than 30! This means that that the root must be bigger than 3.75 since if the number is smaller, we get an even smaller square, we must be getting close.</p>

<p>\[3.75 &lt; \sqrt{30} &lt; 7.5\]</p>

<p>Now we must find out what number is in the middle. Well, from our geometry class we know that the average of two numbers is the middle number, so \(\frac{3.75 + 7.5}{2} = 5.625\). We simply need to square this number to check now.</p>

<p>\[5.625^2 = 31.640625\]</p>

<p>It seems we have gotten a lot closer now that we moved the lower bound up. Our guess of 5.625 seems really close to the answer now. But because its square is bigger than 30, we know the root must be smaller than 5.625, so:</p>

<p>\[3.75 &lt; \sqrt{30} &lt; 5.625\]</p>

<p>The middle number of this is then 4.6875.</p>

<p>\[4.6875^2 = 21.972656\]</p>

<p>That&rsquo;s really far away. This can&rsquo;t be the answer, but lets keep looking. Since its square is smaller than 30, we change the lower bound to this.</p>

<p>\[4.6875 &lt; \sqrt{30} &lt; 5.625\]</p>

<p>This time, the middle number is 5.15625.</p>

<p>\[5.15625^2 = 26.586914\]</p>

<p>We are getting closer again, but this is smaller than 30, so our lower bound should be changed.</p>

<p>\[5.15625 &lt; \sqrt{30} &lt; 5.625\]</p>

<p>I know, it starts to get frustrating at this point since we seem to be crawling, but lets stay on for another two rounds. The number in the middle is 5.390625</p>

<p>\[5.390625^2 = 29.058838\]</p>

<p>Our result now is very very close to 30. It is smaller, so the lower bound should be changed.</p>

<p>\[5.390625 &lt; \sqrt{30} &lt; 5.625\]</p>

<p>The middle number is now 5.507812. That means the square is&hellip;</p>

<p>\[5.507812^2 = 30.336\]</p>

<p>Okay! We are pretty close, but the important thing is we know it will eventually arrive at the answer because we kept getting closer to the answer as we went. Now, we know computers do things faster than we do so let us write some code!</p>

<p>So first of all, we want to have our initial guess. The number to be rooted is 30.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">double</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="n">number</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">lowerBound</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, we write down what we did in every iteration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// We try and figure out if the middle number is the correct root</span>
</span><span class='line'><span class="kt">double</span> <span class="n">rootGuess</span> <span class="o">=</span> <span class="p">(</span><span class="n">upperBound</span> <span class="o">+</span> <span class="n">lowerBound</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">rootGuessSquared</span> <span class="o">=</span> <span class="n">rootGuess</span> <span class="o">*</span> <span class="n">rootGuess</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">rootGuessSquared</span> <span class="o">&gt;</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// if the square of our guess is bigger than the number, that means the root is too big.</span>
</span><span class='line'>  <span class="c1">// so the root cannot be bigger than our current guess</span>
</span><span class='line'>  <span class="n">upperBound</span> <span class="o">=</span> <span class="n">rootGuess</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// otherwise, the root cannot be smaller than our current guess.</span>
</span><span class='line'>  <span class="n">lowerBound</span> <span class="o">=</span> <span class="n">rootGuess</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we tell the computer to do it over and over again until the square of our guess is the number itself, so we wrap that in a loop.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">double</span> <span class="n">rootGuess</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// We try and figure out if the middle number is the correct root</span>
</span><span class='line'>  <span class="n">rootGuess</span> <span class="o">=</span> <span class="p">(</span><span class="n">upperBound</span> <span class="o">+</span> <span class="n">lowerBound</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">rootGuessSquared</span> <span class="o">=</span> <span class="n">rootGuess</span> <span class="o">*</span> <span class="n">rootGuess</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rootGuessSquared</span> <span class="o">&gt;</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// if the square of our guess is bigger than the number, that means the root is too big.</span>
</span><span class='line'>      <span class="c1">// so the root cannot be bigger than our current guess</span>
</span><span class='line'>      <span class="n">upperBound</span> <span class="o">=</span> <span class="n">rootGuess</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// otherwise, the root cannot be smaller than our current guess.</span>
</span><span class='line'>      <span class="n">lowerBound</span> <span class="o">=</span> <span class="n">rootGuess</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">rootGuess</span> <span class="o">*</span> <span class="n">rootGuess</span> <span class="o">!=</span> <span class="n">number</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great, that seems simple enough. Let&rsquo;s put it all together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">double</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="n">number</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">lowerBound</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="n">rootGuess</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// We try and figure out if the middle number is the correct root</span>
</span><span class='line'>  <span class="n">rootGuess</span> <span class="o">=</span> <span class="p">(</span><span class="n">upperBound</span> <span class="o">+</span> <span class="n">lowerBound</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">rootGuessSquared</span> <span class="o">=</span> <span class="n">rootGuess</span> <span class="o">*</span> <span class="n">rootGuess</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rootGuessSquared</span> <span class="o">&gt;</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// if the square of our guess is bigger than the number, that means the root is too big.</span>
</span><span class='line'>      <span class="c1">// so the root cannot be bigger than our current guess</span>
</span><span class='line'>      <span class="n">upperBound</span> <span class="o">=</span> <span class="n">rootGuess</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// otherwise, the root cannot be smaller than our current guess.</span>
</span><span class='line'>      <span class="n">lowerBound</span> <span class="o">=</span> <span class="n">rootGuess</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%lf &lt; sqrt(30) &lt; %lf guess=%lf rootGuessSquared=%lf</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">upperBound</span><span class="p">,</span> <span class="n">lowerBound</span><span class="p">,</span> <span class="n">rootGuess</span><span class="p">,</span> <span class="n">rootGuessSquared</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">rootGuess</span> <span class="o">*</span> <span class="n">rootGuess</span> <span class="o">!=</span> <span class="n">number</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;result = %lf</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">rootGuess</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice I put in a printf to check the bounds as it runs. This makes it more interesting and actually shows us what&rsquo;s going on. Lets run it now.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">15.000000</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">0.000000</span> <span class="n">guess</span><span class="o">=</span><span class="mf">15.000000</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">225.000000</span>
</span><span class='line'><span class="mf">7.500000</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">0.000000</span> <span class="n">guess</span><span class="o">=</span><span class="mf">7.500000</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">56.250000</span>
</span><span class='line'><span class="mf">7.500000</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">3.750000</span> <span class="n">guess</span><span class="o">=</span><span class="mf">3.750000</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">14.062500</span>
</span><span class='line'><span class="mf">5.625000</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">3.750000</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.625000</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">31.640625</span>
</span><span class='line'><span class="mf">5.625000</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">4.687500</span> <span class="n">guess</span><span class="o">=</span><span class="mf">4.687500</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">21.972656</span>
</span><span class='line'><span class="mf">5.625000</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.156250</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.156250</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">26.586914</span>
</span><span class='line'><span class="mf">5.625000</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.390625</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.390625</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.058838</span>
</span><span class='line'><span class="mf">5.507812</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.390625</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.507812</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.335999</span>
</span><span class='line'><span class="mf">5.507812</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.449219</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.449219</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.693985</span>
</span><span class='line'><span class="mf">5.478516</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.449219</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.478516</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.014133</span>
</span><span class='line'><span class="mf">5.478516</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.463867</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.463867</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.853845</span>
</span><span class='line'><span class="mf">5.478516</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.471191</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.471191</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.933935</span>
</span><span class='line'><span class="mf">5.478516</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.474854</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.474854</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.974021</span>
</span><span class='line'><span class="mf">5.478516</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.476685</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.476685</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.994074</span>
</span><span class='line'><span class="mf">5.477600</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.476685</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477600</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.004103</span>
</span><span class='line'><span class="mf">5.477600</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477142</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477142</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.999088</span>
</span><span class='line'><span class="mf">5.477371</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477142</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477371</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.001595</span>
</span><span class='line'><span class="mf">5.477257</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477142</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477257</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000342</span>
</span><span class='line'><span class="mf">5.477257</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477200</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477200</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.999715</span>
</span><span class='line'><span class="mf">5.477228</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477200</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477228</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000028</span>
</span><span class='line'><span class="mf">5.477228</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477214</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477214</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.999872</span>
</span><span class='line'><span class="mf">5.477228</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477221</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477221</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.999950</span>
</span><span class='line'><span class="mf">5.477228</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477225</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477225</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.999989</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477225</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000009</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477225</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477225</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">29.999999</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477225</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000004</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477225</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000001</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477225</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="mf">5.477226</span> <span class="o">&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">5.477226</span> <span class="n">guess</span><span class="o">=</span><span class="mf">5.477226</span> <span class="n">rootGuessSquared</span><span class="o">=</span><span class="mf">30.000000</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="mf">5.477226</span>
</span></code></pre></td></tr></table></div></figure>


<p>After all that spam, now we can see that the result is the square root of 30, since we know 5.477226 is the square root of 30.</p>

<p>This method of calculating square roots is called the Bisection method, also known as a binary search. Its not very efficient as you can see, and takes a long time to converge.</p>

<p>Now we know what it takes to find a square root! Now you can simply try it with a bunch of numbers and get the right answer. You can also compare the answer with the actual sqrt() function provided by the standard library.</p>

<p>It is also interesting to note that you can use this method to get cube roots, quartic roots and quintic roots too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Script for setting up FTP to a folder on a Mac]]></title>
    <link href="https://davidsiaw.github.io/blog/2015/01/23/script-for-setting-up-ftp-to-a-folder-on-a-mac/"/>
    <updated>2015-01-23T10:34:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2015/01/23/script-for-setting-up-ftp-to-a-folder-on-a-mac</id>
    <content type="html"><![CDATA[<p>This script came in handy many times when I had to share things with my other laptops or windows users.</p>

<p>On a Mac you should have Ruby installed. Macs normally come with an ftpd whose frontend has been ripped out, so you can only do this on the command line. Basically, write this to a script file (lets call it <code>setftp</code>)</p>

<p>and then use it by typing:</p>

<p><code>./setftp /directoryIWantToShare</code></p>

<p>Tested on Mavericks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#puts ARGV.inspect</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="sb">`sudo -s launchctl unload -w /System/Library/LaunchDaemons/ftp.plist`</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">THEFILE</span>
</span><span class='line'><span class="sh"># Set the ftp root dir to this folder</span>
</span><span class='line'><span class="sh">umask all 022</span>
</span><span class='line'><span class="sh">chroot GUEST #{ARGV[0]}</span>
</span><span class='line'><span class="sh">modify guest off</span>
</span><span class='line'><span class="sh">umask  guest 0707</span>
</span><span class='line'><span class="sh">upload guest on</span>
</span><span class='line'><span class="no">THEFILE</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;/etc/ftpd.conf&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">config</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="sb">`sudo -s launchctl load -w /System/Library/LaunchDaemons/ftp.plist`</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this you will have an ftpd turn on whose root folder is the folder you named. in this case it is <code>/directoryIWantToShare</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hexlife Part 2]]></title>
    <link href="https://davidsiaw.github.io/blog/2014/11/22/hexlife-part-2/"/>
    <updated>2014-11-22T11:47:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2014/11/22/hexlife-part-2</id>
    <content type="html"><![CDATA[<p>Yesterday while fooling around, I wanted to build a tri-star, but I made a mistake and made this instead:</p>

<p><img src="https://davidsiaw.github.io/images/hexlife/semistill-seed.png" alt="Alt text" /></p>

<p>But to my surprise I did not find a tri-star, instead this grew out of it:</p>

<p><img src="https://davidsiaw.github.io/images/hexlife/Y-semistill.png" alt="Alt text" /></p>

<p>Since I had made changes to tint different generations with different colors, I wanted to test it. Wondering if I had introduced bugs, I went through my git history to make sure everything was fine. After reverting, it turned out I hadn&rsquo;t. It was just a variation I had never tried.</p>

<p>In my <a href="https://davidsiaw.github.io/blog/2014/11/21/hexlife/">earlier post</a>, I said that still lifes could not exist under the rules because cells could not live long enough, but these structures persisted. In other words, they were non-transient cells.</p>

<p>It turns out that most of the cells here had 3 neighbours, and that gave them a long lease on life. Also, all the way along the columns, there were no dead cells that had 2 cell neighbours, meaning that the cells would never die because of their spawn.</p>

<p>However, the ends are kept alive by an interesting &ldquo;flower&rdquo; oscillator that resembles the twinkling star oscillator, and this keeps the entire structure alive. Basically, you can make an infinitely long structure, but you must place the oscilators at the ends.</p>

<p>Armed with this knowledge, I set out to create a simpler column.</p>

<p><img src="https://davidsiaw.github.io/images/hexlife/I-semistill.png" alt="Alt text" /></p>

<p>I call this kind of life form a Semi-still life, since a large proportion of it can be unchanging, but must be supported by oscillation.</p>

<p>Perhaps there are more of these under these rules&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hexlife]]></title>
    <link href="https://davidsiaw.github.io/blog/2014/11/21/hexlife/"/>
    <updated>2014-11-21T10:46:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2014/11/21/hexlife</id>
    <content type="html"><![CDATA[<p>Last week I wrote a simple Game of Life variation that runs on a hexagonal grid after viewing <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life#mediaviewer/File:Oscillator.gif">an example on Wikipedia</a>. The cells considered are the immediate neighbours. The rules are:</p>

<ul>
<li>if a dead cell is surrounded by 2 live cells, the dead cell becomes alive</li>
<li>if a live cell is surrounded by 3 or 4 live cells, it stays alive</li>
<li>in all other cases, the cell dies</li>
</ul>


<p>One of the interesting things about this set of rules is the absence of still life. The reason for this absence is that a cell can only be born under conditions where a live cell would otherwise die. This means that whenever a cell is born it is likely to kill its parents.</p>

<p>Hence the only known stable life forms in this set of rules at the moment are oscillators. No gliders have been found yet.</p>

<p>You can play with my implementation here: <a href="http://davidsiaw.github.io/hexlife/">http://davidsiaw.github.io/hexlife/</a></p>

<p>In my search for a glider in this set of rules, I found a bunch of oscillators and decided to record them:</p>

<table>
<thead>
<tr>
<th>Picture                                     </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/2cell.png" alt="Alt text" />        </td>
<td> The <strong>2cell</strong> is the simplest and most common oscillator. It is left behind by almost any unstable life.</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/spinner.png" alt="Alt text" />      </td>
<td> The <strong>Spinner</strong> is another common oscillator that has a period of 2. It simply looks like it is spinning.</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/mouth.png" alt="Alt text" />        </td>
<td> The <strong>Mouth</strong> looks like a spinner but instead of 2nd level adjacent, they are 3rd level adjacent, so it looks like it is always opening and closing</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/needle.png" alt="Alt text" />       </td>
<td> The <strong>Needle</strong> has a period of 2 and flips back and forth.</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/dancer.png" alt="Alt text" />       </td>
<td> The <strong>Dancer</strong> has a period of 2 and looks like its swinging back and forth.</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/star.png" alt="Alt text" />         </td>
<td> The <strong>Star</strong> looks like a twinkling star. It is quite peculiar in the sense that it has a period of 3.</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/rotator.png" alt="Alt text" />      </td>
<td> The <strong>Rotator</strong> has a period of 4 and looks like it is spinning in a weird way.</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/bat.png" alt="Alt text" />          </td>
<td> The <strong>Bat</strong> is perhaps the most common 4-period oscillator you get from random starts.</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/snake.png" alt="Alt text" />        </td>
<td> The <strong>Snake</strong> is a period-4 oscillator that looks like a snake that wiggles around</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/morpher.png" alt="Alt text" />      </td>
<td> The <strong>Morpher</strong> is really simple but really interesting-looking oscillator. It has got a period of 12 and transforms into all its possible orientations. This means that even though it has no symmetry, it does not matter which way you orient it, it will achieve the same configurations. I call this temporal homogeneity.</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/tristar.png" alt="Alt text" />      </td>
<td> The <strong>Tristar</strong> is a period-12 oscillator that twinkles in a more elaborate way than the star.</td>
</tr>
<tr>
<td><img src="https://davidsiaw.github.io/images/hexlife/swimmer.png" alt="Alt text" />      </td>
<td> The <strong>Swimmer</strong> is an oscillator with a period of 48. You can actually find it on the Wikipedia page I linked. It seems like a lost fish swimming back and forth.</td>
</tr>
</tbody>
</table>


<p>If you find more oscillators please leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Travis to deploy my blog]]></title>
    <link href="https://davidsiaw.github.io/blog/2014/10/30/using-travis-to-deploy-my-blog/"/>
    <updated>2014-10-30T01:07:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2014/10/30/using-travis-to-deploy-my-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Travis-CI more and more as a platform from which I can deploy things, due to the fact that we can run any code on it. Today I made it so that this blog is deployed to gh-pages when pushed. I have also set up my personal blog to be pushed this way as well.</p>

<p>Why did I use Travis-CI instead of Shippable or other CI systems for this? Well, its mainly due to the fact that I was already using Travis, and the tools (specifically the Travis gem) are quite mature. Many of the things that are quite troublesome, like generating a key and placing decrypt commands into the .travis.yml, are now covered in simple command line instructions.</p>

<p>My blog uses Jekyll + Octopress, but I don&rsquo;t like the limitations imposed by github on the templates I can use. So I decided it was better to simply upload the finished product. First of all, I push all my blog sources up to a public repository at <a href="https://github.com/davidsiaw/davidsiaw.github.io.source">https://github.com/davidsiaw/davidsiaw.github.io.source</a></p>

<p>While the setup is easy, its not obvious that you can do this. Hopefully this will go some way to helping others who want to circumvent the github limitations on their gh-pages content as well.</p>

<p>In this post I will show you how to set it up. First of all, I create a key that will give push access to my blog&rsquo;s repository at <a href="https://github.com/davidsiaw/davidsiaw.github.io">https://github.com/davidsiaw/davidsiaw.github.io</a> by calling up <code>ssh-keygen</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nagatsuki david$ ssh-keygen
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/Users/david/.ssh/id_rsa): deploy_key
</span><span class='line'>Enter passphrase (empty for no passphrase): 
</span><span class='line'>Enter same passphrase again: 
</span><span class='line'>Your identification has been saved in deploy_key.
</span><span class='line'>Your public key has been saved in deploy_key.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>89:8d:a9:60:5c:8b:77:05:c4:2b:05:a4:96:64:8e:fa david@nagatsuki
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+--[ RSA 2048]----+
</span><span class='line'>|     .=+o        |
</span><span class='line'>|     *  o.       |
</span><span class='line'>|    = o. o.      |
</span><span class='line'>| o = ..=.o       |
</span><span class='line'>|  = . =.S        |
</span><span class='line'>|   o o .         |
</span><span class='line'>|    E            |
</span><span class='line'>|                 |
</span><span class='line'>|                 |
</span><span class='line'>+-----------------+</span></code></pre></td></tr></table></div></figure>


<p>I then place the deploy_key.pub in my github repository.</p>

<p>Next, I make use of the Travis gem to encrypt my private key. I add the <code>--add</code> parameter to make it write to my .travis.yml (I am in the directory.)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nagatsuki david$ travis encrypt-file deploy_key --add
</span><span class='line'>encrypting deploy_key for davidsiaw/davidsiaw.github.io
</span><span class='line'>storing result as deploy_key.enc
</span><span class='line'>storing secure env variables for decryption
</span><span class='line'>
</span><span class='line'>Make sure to add deploy_key.enc to the git repository.
</span><span class='line'>Make sure not to add deploy_key to the git repository.
</span><span class='line'>Commit all changes to your .travis.yml.</span></code></pre></td></tr></table></div></figure>


<p>This gives me a deploy_key.enc that is my encrypted private key.</p>

<p>In order to use this key, I need to add some more lines to <a href="https://github.com/davidsiaw/davidsiaw.github.io.source/blob/master/.travis.yml">.travis.yml</a> to enable it to push to github. First of all, I need to install the key into the .ssh folder so git can use it. I also chmod it so ssh will not complain.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chmod 600 deploy-key</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cp deploy-key ~/.ssh/id_rsa</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, I can now tell Travis to push the generated files. All I do is tell it to generate the site (since this is just Jekyll), and then call my <a href="https://github.com/davidsiaw/davidsiaw.github.io.source/blob/master/deploy">deploy script</a> which simply pushes the right stuff up to github.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bundle exec rake generate</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bash deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, my website gets updated everytime I push my changes to <a href="https://github.com/davidsiaw/davidsiaw.github.io.source">https://github.com/davidsiaw/davidsiaw.github.io.source</a>, Travis will automatically update my blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog]]></title>
    <link href="https://davidsiaw.github.io/blog/2013/10/12/new-blog/"/>
    <updated>2013-10-12T16:03:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2013/10/12/new-blog</id>
    <content type="html"><![CDATA[<p>As all of you may have noticed the theme has changed and the URL seems to have been redirected to Github. I decided to try out this github pages thing and it seems to work pretty well. The static content idea is really attractive to me and really gives me much more power over the pages with a small tradeoff for convenience. But convenience is a non-issue for most programmers who can write tools to make the inconvenient convenient.</p>

<p>What I want to talk about here is actually how I started doing this and why I ended up moving my blog across, along with what I learned along the way about Jekyll-Bootstrap, Octopress, Jekyll, the annoying problems and the process of migrating from a WordPress blog to a Octopress/Disqus duo.</p>

<!--more-->


<h2>1. Github Pages</h2>

<p>After a friend of mine started up his blog, I decided to give it a shot too. From searching around most of the Github pages around were set up as blogs. It seemed like that was a natural thing to do so I went on and used the Github automatic page generator.</p>

<p>The themes provided were incredibly high quality, and were easy to read on the iPhone. The syntax highlighting seemed to just work too so it seemed like everything was going to be good.</p>

<p>I soon realized that all the automatic page generator did was set up an index.html on the repository. I had to begin editing the html page myself and if I wanted an automatically updated sidebar of pages and posts, there needed to be some Liquid code in the pages that required that.</p>

<p>It started to seem like a pain for a blogging environment.</p>

<h2>2. Jekyll-bootstrap</h2>

<p>Believing in the power of existing tools, I was sure someone out there would have solved this problem for me. After googling around I found Jekyll-Bootstrap. It seemed fairly simple to set up, since it was simply a starting point with Rakefiles and preset templates for blogging. It also used pygments for syntax highlighting, and had theming support and plugins.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake new_post <span class="nv">title</span><span class="o">=</span><span class="s2">&quot;Rants of today&quot;</span>
</span><span class='line'><span class="nv">$ </span>rake new_page <span class="nv">title</span><span class="o">=</span><span class="s2">&quot;My new page&quot;</span>
</span><span class='line'><span class="nv">$ </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>You had to have an empty repository to start with Jekyll-bootstrap because it needs to dictate how things are in your blog. The easiest way to do this it seems is to begin your repository contents with the contents of Jekyll-bootstrap.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.com
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>USERNAME.github.com
</span><span class='line'><span class="nv">$ </span>git remote <span class="nb">set</span>-url origin git@github.com:USERNAME/USERNAME.github.com.git
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>The site, being a set of markdown and html files with Liquid markups would then simply be checked in to github where it would automatically be run through Jekyll and displayed.</p>

<p>The themes for Jekyll-bootstrap weren&rsquo;t as good as the ones you could find for Github, but that did not pose much of a problem. There also weren&rsquo;t many of them. It also turned out that besides the automatic page and post file generation and theme application, there wasn&rsquo;t much in terms of defaults. The index.md only had a simple example of listing posts, and if you wanted a sidebar and show posts on the index.html, or apply disqus to it, you had to do all of that yourself.</p>

<p><a href="http://themes.jekyllbootstrap.com/">Jekyll-bootstrap Themes</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake theme:install <span class="nv">git</span><span class="o">=</span><span class="s2">&quot;https://github.com/dhulihan/hooligan.git&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was surprised at the seeming lack of extra examples that can be copy-pasted in to set the blog up. As it turns out jekyll-bootstrap hasn&rsquo;t been maintained for a while, since its maintainer has moved on to create another static site generator.</p>

<p>I set this aside on a different folder and proceeded to try the other alternative which seemed more used and still had an active community and maintainers.</p>

<h2>3. Octopress</h2>

<p>The alternative was Octopress. Octopress is different from Jekyll-bootstrap in the sense that it wasn&rsquo;t just a template for blogging sites. It is a small collection of tools that allow you to set themes and generate your site locally. Another difference is that the static site generation is actually done on your own PC, and you push the result to github. This means it would work for any other site, which was fairly attractive. Similar to Jekyll-bootstrap, you would fork Octopress and clone your modifications in to another repository, and not your site.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/davidsiaw/octopress.git Octopress   <span class="c"># from my forked repository</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span><span class='line'><span class="nv">$ </span>gem install bundler
</span><span class='line'><span class="nv">$ </span>rbenv rehash
</span><span class='line'><span class="nv">$ </span>bundle install        <span class="c"># prepares the set of tools required to maintain your site</span>
</span><span class='line'><span class="nv">$ </span>rake install          <span class="c"># generates your site&#39;s bootstrap sources</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="nv">$ </span>rake deploy           <span class="c"># automatically creates a _deploy folder and pushes that to your site</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git add .             <span class="c"># add the created sources and sass folders that contain the real sources for your site</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;update sources&quot;</span>
</span><span class='line'><span class="nv">$ </span>git pushes            <span class="c"># push your site&#39;s sources</span>
</span></code></pre></td></tr></table></div></figure>


<p>Octopress also has a much larger set of themes available to use to customize your site. Like Jekyll-bootstrap, the theme is on a github repository that you can clone and install with.</p>

<p><a href="http://opthemes.com/">Octopress Theme Site</a></p>

<p>One big headache with Octopress was that its syntax highlighting was not part of the theme, and that the default theme was the Solarize theme which was fairly ugly and bluish. It also wasn&rsquo;t straightforward to configure. It turned out that the syntax configuration is in sass/<em>syntax.scss and the variables in it are stored in sass/</em>solarized.scss.</p>

<p><img src="https://davidsiaw.github.io/images/blogimages/solarized.png"></p>

<p>In order to solve this problem, some googling turned up some people solving this issue by <a href="http://blog.codebykat.com/2013/05/23/gorgeous-octopress-codeblocks-with-coderay/">switching the markdown generator to CodeRay</a>. But it did not change the theme for me and it seemed like a very messy change to have, so I decided to roll my sleeves up and edit the scss files myself, which came out pretty well.</p>

<h2>4. Wordpress Migration</h2>

<p>The final part of my blog setup was to see if I could transfer all the data from my old WordPress blog to this one. It turns out I could. <a href="http://jekyllrb.com/docs/migrations/">Jekyll had a set of tools</a> that allowed me to import the XML file produced by the WordPress export function. This automatically added the pages to source/<em>pages and posts to source/</em>posts in html format.</p>

<p>This is not desirable because in HTML format the newlines are ignored and the posts look fairly retarded, so I renamed all the extensions to .md.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install jekyll-import --pre
</span><span class='line'><span class="nv">$ </span>gem install hpricot
</span><span class='line'><span class="nv">$ </span>ruby -rubygems -e <span class="s1">&#39;require &quot;jekyll/jekyll-import/wordpressdotcom&quot;;</span>
</span><span class='line'><span class="s1">    JekyllImport::WordpressDotCom.process({ :source =&gt; &quot;wordpress.xml&quot; })&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the export was far from perfect. My WordPress install used a lot of plugins, meaning the content was littered with shortcodes that did not look like part of any content. I had to touch nearly every generated file that was imported to get everything nice and polished again.</p>

<h2>5. Disqus</h2>

<p>Disqus is a hosted commenting system that provides a very nice commenting theme that blends in to most Jekyll sites, that&rsquo;s the sole reason I chose it. I thought facebook comments were nice and would provide me with more exposure but it just looked ugly.</p>

<p>Setting Disqus up was fairly easy. It involved registering on Disqus and adding the shortcode of Disqus to the _config.yml. There was one very undocumented frustration though, the comments were not showing up. It turns out that instead of having trailing &lsquo;/&rsquo; on the URLs like other people who had this problem, the imported posts had no &lsquo;comments: true&rsquo; line on them! This meant Disqus was disabled for all those posts. I had to then go through all of the posts and add comments to enable Disqus.</p>

<p>Importing the Wordpress comments into Disqus was fairly trivial as there was a Disqus plugin for Wordpress that allowed us to pull all of the Wordpress plugins in. In addition, I could then rename the domains on all the comments that were associated with the Wordpress site to being associated to my site, which was a really handy tool to have.</p>

<h2>Conclusion</h2>

<p>Overall, this actually took an entire Saturday morning, which is pretty heavy for a &ldquo;Simple&rdquo; framework for blogging on static sites. The only thing that looked simple was the amount of stuff that you end up with on the website, which gives the impression that not a lot of work went into building the site.</p>

<p>I guess it wouldn&rsquo;t be too far fetched to say that even with top grade tools, if a little customization is required, the amount of work to set up a website increases exponentially in relation to the customization you do.</p>

<p>With blogging on the site, one of the things I miss is the ability to see images next to the text that I type, that Wordpress&rsquo;s web interface or <a href="http://labs.astrobunny.net/bunnyblogger">Bunnyblogger</a> affords.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online vs Batch learning]]></title>
    <link href="https://davidsiaw.github.io/blog/2013/03/18/online-vs-batch-learning/"/>
    <updated>2013-03-18T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2013/03/18/online-vs-batch-learning</id>
    <content type="html"><![CDATA[<p>While debugging neuron, my new neural network simulation application, I found some (visually) interesting differences between online and batch learning. While batch learning is usually touted as a better form of learning, I found that the two don&rsquo;t seem to make much difference, except for a steppy curve from online learning, as I would expect as the gradient changes differently if you keep calculating the values in a cycle instead of calculating the combined gradient of all the training data.</p>

<p>Here are the results from training a 2-2-1 network with biases with XOR as training data:</p>

<p><a href="http://labs.astrobunny.net/wp-content/uploads/2013/03/wpid-neuron2.jpg" rel="lightbox"><img src="http://labs.astrobunny.net/wp-content/uploads/2013/03/wpid-neuron2-500x81.jpg" alt="" title="Picture" width="500" height="81" class="alignnone size-medium wp-image-1204" /></a></p>

<p>with the weights initialized to:</p>

<p>double[] wx0 = { 0.1, 0.2 };
double[] wx1 = { 0.3, 0.4 };
double[] wx2 = { 0.5, 0.6 };</p>

<p>double wh0 = 0.7;
double wh1 = 0.9;
double wh2 = 1.1;</p>

<p>Where wx are the values between the input and hidden layer and wh are the values between the hidden and output layer.</p>

<p>Here is the network topography:</p>

<p><a href="http://labs.astrobunny.net/wp-content/uploads/2013/03/wpid-neuron1.jpg" rel="lightbox"><img src="http://labs.astrobunny.net/wp-content/uploads/2013/03/wpid-neuron1-500x361.jpg" alt="" title="Picture" width="500" height="361" class="alignnone size-medium wp-image-1204" /></a></p>

<p>Here is the training error:</p>

<p><a href="http://labs.astrobunny.net/wp-content/uploads/2013/03/wpid-chart_1-1.png" rel="lightbox"><img src="http://labs.astrobunny.net/wp-content/uploads/2013/03/wpid-chart_1-1-500x272.png" alt="" title="Picture" width="500" height="272" class="alignnone size-medium wp-image-1204" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This seems to make Cappuccino faster...]]></title>
    <link href="https://davidsiaw.github.io/blog/2012/12/19/this-seems-to-make-cappuccino-faster/"/>
    <updated>2012-12-19T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2012/12/19/this-seems-to-make-cappuccino-faster</id>
    <content type="html"><![CDATA[<p>My lack of knowledge about Cappuccino&rsquo;s implementation details may play a role, but</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">setNativeTimeout</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seems to make my Cappuccino apps more responsive.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Identity of an Array]]></title>
    <link href="https://davidsiaw.github.io/blog/2012/12/12/the-identity-of-an-array/"/>
    <updated>2012-12-12T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2012/12/12/the-identity-of-an-array</id>
    <content type="html"><![CDATA[<p>Given two arrays of integers: a and b, what does (a == b) mean?</p>

<p>Most of us will say, it depends on the programming language you are using, and that is true. In the case of C, it means a and b are the pointers to the start of the same array. In Java and C# it means the arrays are Reference Equal, basically meaning that the pointer to the arrays a and b are the same.</p>

<p>But how is that really useful? If you passed around these two arrays and checked if the references are the same, you are really just comparing the object with itself or not. The object is never going to be equal to anything else but itself. Even another array created in a different part of the program that has exactly the same integers in it in the same order will be a different array.</p>

<p>One would agree that [1, 2, 3] and [1, 2, 3] are the same but if these two arrays were created at different places the == operator will return false. Why is the extra information that the arrays are made in two different places important to the == operator? It makes no sense when you look at arrays as a list of numbers, and not a pointer into memory, which is an implementation detail.</p>

<p>So if we were to write a better == operator for arrays, what would it be?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1,2,3,3] == [1,2,3,3] -&gt; true
</span><span class='line'>[1,2,3,3] == [3,2,1,3] -&gt; ?
</span><span class='line'>[1,2,3,3] == [1,2,3,1,2,3] -&gt; ?
</span><span class='line'>[1,2,3,3] == [2,3,1] -&gt; ?
</span><span class='line'>[1,2,3,3] == [1,2,3] -&gt; ?
</span><span class='line'>[1,2,3,3] == [1233] -&gt; ?
</span><span class='line'>[1,2,3,3] == "1233" -&gt; ?</span></code></pre></td></tr></table></div></figure>


<p>We suddenly see that the array&rsquo;s identity changes depending on what you are using it for. Let us replace those question marks with context.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1,2,3,3] == [1,2,3,3] -&gt; true if the array is an ordered list
</span><span class='line'>[1,2,3,3] == [3,2,1,3] -&gt; true if the array is an unordered list
</span><span class='line'>[1,2,3,3] == [1,2,3,1,2,3] -&gt; true if the array is a bag of numbers
</span><span class='line'>[1,2,3,3] == [2,3,1] -&gt; true if the array is an unordered set
</span><span class='line'>[1,2,3,3] == [1,2,3] -&gt; true if the array is an ordered set
</span><span class='line'>[1,2,3,3] == [1233] -&gt; true if the array is a collection of digits
</span><span class='line'>[1,2,3,3] == "1233" -&gt; true if the array is a string</span></code></pre></td></tr></table></div></figure>


<p>The array is too general. It is actually really important that we know what the array represents. A whole bunch of things are arrays but are passed around as plain arrays. This causes maintainer programmers to wonder what exactly they represent.</p>

<p>Some cite performance reasons. Fair enough, passing a struct that contains an array and a set of methods to manipulate it in C is slower than just passing the struct around. C is a very low level language where implementation detail really mixes with requirements.</p>

<p>But why is it that so many other modern languages have this problem? Why isn&rsquo;t there a language that treats a set like a set, and has a compiler that really just compiles it down into an array?</p>

<p>Interestingly enough, this problem does not stop at arrays. Numbers have different meanings in different contexts too. Take for example the function Math.Cos in C#. This function takes a double in <i>radians</i>.</p>

<p>Why is it that the function signature is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">double</span> <span class="nf">Cos</span><span class="p">(</span><span class="kt">double</span> <span class="n">angle</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and not</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">ratio</span> <span class="nf">Cos</span><span class="p">(</span><span class="n">radians</span> <span class="n">angle</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>where radians is just a type of double?</p>

<p>If the compiler was fed this information the first place, programs like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">degrees</span> <span class="n">a</span> <span class="p">=</span> <span class="m">40</span><span class="p">;</span>
</span><span class='line'><span class="n">ratio</span> <span class="n">r</span> <span class="p">=</span> <span class="n">Cos</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>will cause the compiler to either throw a compiler error for passing degrees into a radians parameter, or generate code to convert degrees to radians.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exceptionless Programming]]></title>
    <link href="https://davidsiaw.github.io/blog/2012/11/28/exceptionless-programming/"/>
    <updated>2012-11-28T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2012/11/28/exceptionless-programming</id>
    <content type="html"><![CDATA[<p>I am a big fan of writing code that generates no runtime errors. This is an implementation of a function that takes the first element of an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">first</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="n">EmptyArrayException</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the standard way we are taught to write programs. However, there is another way to write this function that makes the exception unneccessary.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">first</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">array</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">returnCallback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">returnCallback</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suddenly the program flow is dictated by the emptiness of the array. Besides knowing well that this function will never throw an exception, the program that uses it will be structured in such a way that you can guarantee within the scope of the returnCallback function that was passed in, the function will always have the first element of the array. You don&rsquo;t even have to check for nullness.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">calcCheckSum</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sorted</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">first</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">sorted</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;](</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">&amp;</span> <span class="n">res</span> <span class="o">=</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>      <span class="n">last</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">sorted</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;](</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">res</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as a perk, if this function compiles, you know that it will run without errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nice Visualization of a Cross Product]]></title>
    <link href="https://davidsiaw.github.io/blog/2012/11/18/nice-visualization-of-a-cross-product/"/>
    <updated>2012-11-18T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2012/11/18/nice-visualization-of-a-cross-product</id>
    <content type="html"><![CDATA[<p><a href="http://www.phy.syr.edu/courses/java-suite/crosspro.html">[This]</a> is a very nice Java applet that allows you to see what a cross product is. The applet shows A x B = C (i.e. C is the cross product of A and B) in 3 dimensions. You can drag A and B around to see the effects on C.</p>

<p>This UI is an example of very good interactivity. It makes it very easy for the user to see what happens and since its interactive, the feedback is instant and a little playing around with it gives the user an intuition of how cross products work (not how they are done).</p>

<p>Instead of a program where you enter numbers, dragging arrows around give you a much better view of whats going on, and allows the user to relate a real-life situation to it better too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blurred Text Effect]]></title>
    <link href="https://davidsiaw.github.io/blog/2012/08/13/blurred-text-effect/"/>
    <updated>2012-08-13T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2012/08/13/blurred-text-effect</id>
    <content type="html"><![CDATA[<p>I came across a strange site that blurred the text of answers and asked the reader to sign up to see it. It was strange because the text was already there, just blurred via css. I thought it was an interesting little snippet so I decided to record it.</p>

<p><span style="color:transparent; text-shadow:0 0 7px #777">This is how it blurs</span>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.blurred_text</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="k">transparent</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-shadow</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">7px</span> <span class="m">#777</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regex Escapees]]></title>
    <link href="https://davidsiaw.github.io/blog/2011/11/22/regex-escapees/"/>
    <updated>2011-11-22T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2011/11/22/regex-escapees</id>
    <content type="html"><![CDATA[<p>Sometimes when one writes regexes, Its hard to know what needs to be escaped and what doesn&rsquo;t. But I&rsquo;ve solved that problem while I was writing a program that generated my regexes for me. Now I have a snippet that both humans and programs can use to write regexes!</p>

<p>This is for the .NET flavor of Regex.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">SanitizeToken</span><span class="p">(</span><span class="kt">string</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">token</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">@&quot;\&quot;</span><span class="p">,</span> <span class="s">@&quot;\\&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;*&quot;</span><span class="p">,</span> <span class="s">@&quot;\*&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;?&quot;</span><span class="p">,</span> <span class="s">@&quot;\?&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;+&quot;</span><span class="p">,</span> <span class="s">@&quot;\+&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;{&quot;</span><span class="p">,</span> <span class="s">@&quot;\{&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;}&quot;</span><span class="p">,</span> <span class="s">@&quot;\}&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;^&quot;</span><span class="p">,</span> <span class="s">@&quot;\^&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;$&quot;</span><span class="p">,</span> <span class="s">@&quot;\$&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">,</span> <span class="s">@&quot;\.&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;[&quot;</span><span class="p">,</span> <span class="s">@&quot;\[&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;]&quot;</span><span class="p">,</span> <span class="s">@&quot;\]&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;(&quot;</span><span class="p">,</span> <span class="s">@&quot;\(&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;)&quot;</span><span class="p">,</span> <span class="s">@&quot;\)&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">,</span> <span class="s">@&quot;\|&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Color From Alpha, Hue, Saturation and Brightness]]></title>
    <link href="https://davidsiaw.github.io/blog/2011/11/22/making-color-from-alpha-hue-saturation-and-brightness/"/>
    <updated>2011-11-22T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2011/11/22/making-color-from-alpha-hue-saturation-and-brightness</id>
    <content type="html"><![CDATA[<p>I find myself wanting to do this sometimes, so here&rsquo;s a bit of code (I&rsquo;m sure I stole this code from somewhere else);</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Color</span> <span class="nf">ColorFromAhsb</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">h</span><span class="p">,</span> <span class="kt">float</span> <span class="n">s</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="m">0</span> <span class="p">&gt;</span> <span class="n">a</span> <span class="p">||</span> <span class="m">255</span> <span class="p">&lt;</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">a</span><span class="p">&amp;</span><span class="n">quot</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="m">0f</span> <span class="p">&gt;</span> <span class="n">h</span> <span class="p">||</span> <span class="m">360f</span> <span class="p">&lt;</span> <span class="n">h</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">h</span><span class="p">&amp;</span><span class="n">quot</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="m">0f</span> <span class="p">&gt;</span> <span class="n">s</span> <span class="p">||</span> <span class="m">1f</span> <span class="p">&lt;</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">s</span><span class="p">&amp;</span><span class="n">quot</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="m">0f</span> <span class="p">&gt;</span> <span class="n">b</span> <span class="p">||</span> <span class="m">1f</span> <span class="p">&lt;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">b</span><span class="p">&amp;</span><span class="n">quot</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="m">0</span> <span class="p">==</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToInt32</span><span class="p">(</span><span class="n">b</span> <span class="p">*</span> <span class="m">255</span><span class="p">),</span>
</span><span class='line'>          <span class="n">Convert</span><span class="p">.</span><span class="n">ToInt32</span><span class="p">(</span><span class="n">b</span> <span class="p">*</span> <span class="m">255</span><span class="p">),</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToInt32</span><span class="p">(</span><span class="n">b</span> <span class="p">*</span> <span class="m">255</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">fMax</span><span class="p">,</span> <span class="n">fMid</span><span class="p">,</span> <span class="n">fMin</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">iSextant</span><span class="p">,</span> <span class="n">iMax</span><span class="p">,</span> <span class="n">iMid</span><span class="p">,</span> <span class="n">iMin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="m">0.5</span> <span class="p">&lt;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fMax</span> <span class="p">=</span> <span class="n">b</span> <span class="p">-</span> <span class="p">(</span><span class="n">b</span> <span class="p">*</span> <span class="n">s</span><span class="p">)</span> <span class="p">+</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>      <span class="n">fMin</span> <span class="p">=</span> <span class="n">b</span> <span class="p">+</span> <span class="p">(</span><span class="n">b</span> <span class="p">*</span> <span class="n">s</span><span class="p">)</span> <span class="p">-</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fMax</span> <span class="p">=</span> <span class="n">b</span> <span class="p">+</span> <span class="p">(</span><span class="n">b</span> <span class="p">*</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>      <span class="n">fMin</span> <span class="p">=</span> <span class="n">b</span> <span class="p">-</span> <span class="p">(</span><span class="n">b</span> <span class="p">*</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">iSextant</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="n">Floor</span><span class="p">(</span><span class="n">h</span> <span class="p">/</span> <span class="m">60f</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="m">300f</span> <span class="p">&lt;=</span> <span class="n">h</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">h</span> <span class="p">-=</span> <span class="m">360f</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">h</span> <span class="p">/=</span> <span class="m">60f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">h</span> <span class="p">-=</span> <span class="m">2f</span> <span class="p">*</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="n">Floor</span><span class="p">(((</span><span class="n">iSextant</span> <span class="p">+</span> <span class="m">1f</span><span class="p">)</span> <span class="p">%</span> <span class="m">6f</span><span class="p">)</span> <span class="p">/</span> <span class="m">2f</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="m">0</span> <span class="p">==</span> <span class="n">iSextant</span> <span class="p">%</span> <span class="m">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fMid</span> <span class="p">=</span> <span class="n">h</span> <span class="p">*</span> <span class="p">(</span><span class="n">fMax</span> <span class="p">-</span> <span class="n">fMin</span><span class="p">)</span> <span class="p">+</span> <span class="n">fMin</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fMid</span> <span class="p">=</span> <span class="n">fMin</span> <span class="p">-</span> <span class="n">h</span> <span class="p">*</span> <span class="p">(</span><span class="n">fMax</span> <span class="p">-</span> <span class="n">fMin</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">iMax</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToInt32</span><span class="p">(</span><span class="n">fMax</span> <span class="p">*</span> <span class="m">255</span><span class="p">);</span>
</span><span class='line'>  <span class="n">iMid</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToInt32</span><span class="p">(</span><span class="n">fMid</span> <span class="p">*</span> <span class="m">255</span><span class="p">);</span>
</span><span class='line'>  <span class="n">iMin</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToInt32</span><span class="p">(</span><span class="n">fMin</span> <span class="p">*</span> <span class="m">255</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">iSextant</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="m">1</span><span class="p">:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">iMid</span><span class="p">,</span> <span class="n">iMax</span><span class="p">,</span> <span class="n">iMin</span><span class="p">);</span>
</span><span class='line'>      <span class="k">case</span> <span class="m">2</span><span class="p">:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">iMin</span><span class="p">,</span> <span class="n">iMax</span><span class="p">,</span> <span class="n">iMid</span><span class="p">);</span>
</span><span class='line'>      <span class="k">case</span> <span class="m">3</span><span class="p">:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">iMin</span><span class="p">,</span> <span class="n">iMid</span><span class="p">,</span> <span class="n">iMax</span><span class="p">);</span>
</span><span class='line'>      <span class="k">case</span> <span class="m">4</span><span class="p">:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">iMid</span><span class="p">,</span> <span class="n">iMin</span><span class="p">,</span> <span class="n">iMax</span><span class="p">);</span>
</span><span class='line'>      <span class="k">case</span> <span class="m">5</span><span class="p">:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">iMax</span><span class="p">,</span> <span class="n">iMin</span><span class="p">,</span> <span class="n">iMid</span><span class="p">);</span>
</span><span class='line'>      <span class="k">default</span><span class="p">:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">iMax</span><span class="p">,</span> <span class="n">iMid</span><span class="p">,</span> <span class="n">iMin</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL weirdness]]></title>
    <link href="https://davidsiaw.github.io/blog/2011/10/06/opengl-weirdness/"/>
    <updated>2011-10-06T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2011/10/06/opengl-weirdness</id>
    <content type="html"><![CDATA[<p>Try this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="n">dispList</span> <span class="o">=</span> <span class="n">glGenLists</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glNewList</span><span class="p">(</span><span class="n">dispList</span><span class="p">,</span> <span class="n">GL_COMPILE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=-</span><span class="mi">768</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="mi">768</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=-</span><span class="mi">768</span><span class="p">;</span> <span class="n">y</span><span class="o">&lt;</span><span class="mi">768</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glColor3f</span><span class="p">((</span><span class="kt">double</span><span class="p">)(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>      <span class="p">(</span><span class="kt">double</span><span class="p">)(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertex3i</span><span class="p">((</span><span class="n">x</span><span class="p">)</span>  <span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertex3i</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertex3i</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertex3i</span><span class="p">((</span><span class="n">x</span><span class="p">)</span>  <span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glEnd</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glEndList</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>and render your display list. Then, try this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="n">dispList</span> <span class="o">=</span> <span class="n">glGenLists</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glNewList</span><span class="p">(</span><span class="n">dispList</span><span class="p">,</span> <span class="n">GL_COMPILE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>    <span class="c1">// &lt;- the subtle difference is here</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=-</span><span class="mi">768</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="mi">768</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=-</span><span class="mi">768</span><span class="p">;</span> <span class="n">y</span><span class="o">&lt;</span><span class="mi">768</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>            <span class="n">glColor3f</span><span class="p">((</span><span class="kt">double</span><span class="p">)(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>      <span class="p">(</span><span class="kt">double</span><span class="p">)(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertex3i</span><span class="p">((</span><span class="n">x</span><span class="p">)</span>  <span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertex3i</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertex3i</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertex3i</span><span class="p">((</span><span class="n">x</span><span class="p">)</span>  <span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">glEnd</span><span class="p">();</span>        <span class="c1">// &lt;- and here</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glEndList</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t know if its my graphics drivers, or graphics card or perhaps just me, but the top code maxed out at 60 fps while the bottom code ran at ~10 fps.</p>

<p>Oh, and don&rsquo;t ask me why I&rsquo;m using display lists.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help! GLEW compiles but doesn't link!]]></title>
    <link href="https://davidsiaw.github.io/blog/2011/10/06/help-glew-compiles-but-doesnt-link/"/>
    <updated>2011-10-06T00:00:00+00:00</updated>
    <id>https://davidsiaw.github.io/blog/2011/10/06/help-glew-compiles-but-doesnt-link</id>
    <content type="html"><![CDATA[<p>When you compile the glew_static project from glew on Visual Studio and link it with your program, you may get something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app_init.obj : error LNK2001: unresolved external symbol __imp__glewInit
</span><span class='line'>worldscene.obj : error LNK2001: unresolved external symbol __imp____glewBufferSubData
</span><span class='line'>worldscene.obj : error LNK2001: unresolved external symbol __imp____glewBufferData
</span><span class='line'>worldscene.obj : error LNK2001: unresolved external symbol __imp____glewBindBuffer
</span><span class='line'>worldscene.obj : error LNK2001: unresolved external symbol __imp____glewGenBuffers</span></code></pre></td></tr></table></div></figure>


<p><a href="http://labs.astrobunny.net/wp-content/uploads/2011/10/wpid-glewstatic.jpg" rel="lightbox"><img src="http://labs.astrobunny.net/wp-content/uploads/2011/10/wpid-glewstatic.jpg" alt="" title="Picture" width="487" height="359" class="alignnone size-medium wp-image-1204" /></a></p>

<p>It&rsquo;s easy to fix. Just add GLEW_STATIC to the preprocessor definitions and you&rsquo;re done. This is because without it the header specifies dllimport instead of just extern, which is needed for static linkage.</p>
]]></content>
  </entry>
  
</feed>
